/**
 Medal of Honor: Allied Assault v1.12 REBORN
 ================================================================
 REBORN SCRIPTING FRAMEWORK;
 ================================================================
 BY Sor
 VERSION 0.8.22
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net
 ================================================================
*/

main:
	// If the calling scriptthread using waitexec, it will wait on all those 
	// level events to occur if I thread the following without a path reference.
	thread reborn/system.class::__LevelPhases;
	
	waitthread __InitSystem;
end;

/**
 bool Include([<ent> component])
 =================================================================
 OVERVIEW|: Includes the specified framework class or enum which 
			initializes the component fully (if that weren't already
			the case) and allows it to be accessed via its targetname
			reference.
			
 RETURN	 |: <bool> => 	1 = success
						0 = failure
 
 NOTE 	 |: The actual inclusion does not happen before prespawn!
			If this function is called before prespawn, it will still 
			return a boolean but the inclusion is postponed. 
			In that case, the boolean will indicate that the inclusion 
			will occur (future tense!) successfully at prespawn.
*/
Include local.object:
	if (self) {
		local.object = self;
	} else if (typeof(local.object) != "listener" || local.object == NULL) {
		end 0;
	}
	if (local.object.objectType != game.System.Object.CLASS && \
		local.object.objectType != game.System.Object.CORE && \
		local.object.objectType != game.System.Object.ENUM) 
	{
		end 0
	}
	
	if (parm.previousLevelEvent == "prethink") {
		local.object thread _Include;
	} else {
		local.object waitthread __Include;
	}
end 1;

_Include:
	if (self.initialized == 0) {
		self waitthread self.path::__finalize;
	}
	
	// All the class' children are included as well:
	for (local.i = 0; local.i < self.children.size; local.i++) {
		self.children[local.i] thread _Include;
	}
	
	level waittill prespawn;
	
	// Targetname may be set multiple times on same class...
	// Doesn't appear to be a problem.
	self targetname self.name; 
end;

__Include:
	if ($(self.name)) {
		if (self.targetname == self.name) {
			end; // already included
		} 
		
		// Other ent using our targetname..
		$(self.name) targetname "";
	}
	
	self targetname self.name;

	if (self.initialized == 0) {
		self waitthread self.path::__finalize;
	}
	
	// All the class' children are included as well:
	for (local.i = 0; local.i < self.children.size; local.i++) {
		self.children[local.i] waitthread __Include;
	}
end;

Ls:
	if !(game.System) {
		end;
	}
	conprintf("game{\n");
	game.System waitthread __Ls "\t";
	conprintf("}\n");
end;

__Ls local.prefix:
	conprintf(local.prefix + "." + self.name);
	if (self.objectType == game.System.Object.ENUM) {
		conprintf("*\n");
		end;
	} else {
		conprintf("\n");
	}
	local.prefix += "\t";
	for (local.i = 0; local.i < self.children.size; local.i++) {
		self.children[local.i] waitthread __Ls local.prefix
	}
end;

// Do main autoexec logic in this class...
// I need 1 main function that does executions of specified folders (with filter argument) 
// -> use this if the execution happens only once (unlike the events..)
/* 
	autoexec/
		-> scripts here are executed at all times
	autoexec/ffa/
	autoexec/tdm/
	autoexec/rb/
	autoexec/obj/
		-> if the gametype changes, one can use $Map.SetGametype <int g_gametype> [string abbrev] to execute
		the scripts in the folder specified by 'abbrev'; for the default gametypes one needn't specify an 
		abbreviation. If one does, however, it will be treated as a custom gametype.
		-> if $Map.SetGametype is not called before level waittill spawn, it will be automatically called to
		set the gametype to its default in accordance with g_gametype
	autoexec/<bsp name>/
		-> if there are script files for the current map, they will be run when the default mapscript is added.
	autoexec/<bsp name>/cfg/
		-> .cfg files here will be executed (using stuffsrv "exec ...")
*/
__LevelPhases:
	parm.previousLevelEvent = "prethink";
	
	level waittill prespawn;
	parm.previousLevelEvent = "prespawn";

	level waittill spawn;
	parm.previousLevelEvent = "spawn";
	
	level waittill postthink;
	parm.previousLevelEvent = "postthink";
	
	level waittill playerspawn;
	parm.previousLevelEvent = "playerspawn";
end;

__InitSystem:
	game.false = 0;
	game.true = 1;

	game.System = local CreateListener;
	game.System.name = "System";
	
	game.System.dir = "reborn/";
	game.System.path = (game.System.dir + "system.class");
	game.System.parent = game;
	game.System.children[0] = NIL;
	waitthread __InitObject;
	game.System.objectType = game.System.Object.CORE;
	
	// System info
	game.System.development = "BETA";
	game.System.baseVersion = 0.822;
	game.System.version = (game.System.baseVersion + " " + game.System.development);
	
	// Directory info
	game.System.libraryDir = game.System.dir + "libraries/"
	game.System.storageDir = game.System.dir + "storage/"
	game.System.toolsDir = game.System.dir + "tools/"
	
	// Function pointers
	game.Include = game.System.path::Include;
	game.System.Ls = game.System.path::Ls;
	
	waitthread __InitLibraries;
	waitthread __InitEnumerations;
end;

__InitObject:
	if !(game.System) {
		end;
	}
	game.System.Object = local CreateListener;
	game.System.Object.name = "SystemObject";
	
	game.System.Object.parent = game.System;
	game.System.children[game.System.children.size] = game.System.Object;
	
	game.System.Object waitexec reborn/SystemObject.enum;
	game.System.Object.objectType = game.System.Object.ENUM;
end;

__InitLibraries:
	game.System.Common = 						game.System 		waitthread __NewClass "Common" (game.System.libraryDir + "common/common.class");
	game.System.Event = 						game.System 		waitthread __NewClass "Event" (game.System.libraryDir + "event/event.class");
	game.System.Event.PlayerState = 			game.System.Event	waitthread __NewClass "PlayerStateEvent" (game.System.libraryDir + "event/playerstate/playerstate.class");
	game.System.IO = 							game.System 		waitthread __NewClass "IO" (game.System.libraryDir + "io/io.class");
	game.System.IO.Path = 						game.System.IO		waitthread __NewClass "Path" (game.System.libraryDir + "io/path/path.class");
	game.System.IO.File = 						game.System.IO 		waitthread __NewClass "File" (game.System.libraryDir + "io/file/file.class");
	game.System.IO.Directory = 					game.System.IO 		waitthread __NewClass "Directory" (game.System.libraryDir + "io/directory/directory.class");
	game.System.Maths = 						game.System 		waitthread __NewClass "Maths" (game.System.libraryDir + "maths/maths.class");
	game.System.String = 						game.System 		waitthread __NewClass "String" (game.System.libraryDir + "string/string.class");
	game.System.Array =							game.System			waitthread __NewClass "Array" (game.System.libraryDir + "array/array.class");
	game.System.Server = 						game.System			waitthread __NewClass "Server" (game.System.libraryDir + "server/server.class");
	game.System.Server.CVar = 					game.System.Server	waitthread __NewClass "CVar" (game.System.libraryDir + "server/cvar/cvar.class");
	
	game.System.LocalStorage =					game.System			waitthread __NewClass "LocalStorage" (game.System.libraryDir + "localstorage.class");
	game.System.SessionStorage =				game.System			waitthread __NewClass "SessionStorage" (game.System.libraryDir + "sessionstorage.class");
	
	game.System.String.Char = 					game.System.String 	waitthread __NewClass "Char" (game.System.libraryDir + "string/char/char.class");
	game.System.Vector = 						game.System			waitthread __NewClass "Vector" (game.System.libraryDir + "vector/vector.class");
	//game.System.Debug = 						game.System			waitthread __NewClass "Debug" (game.System.libraryDir + "debug/debug.class");
	game.System.Time = 							game.System			waitthread __NewClass "Time" (game.System.libraryDir + "time/time.class");
	
	game.System.Client = 						game.System			waitthread __NewClass "Client" (game.System.libraryDir + "client/client.class");
	game.System.Client.Storage = 				game.System.Client	waitthread __NewClass "ClientStorage" (game.System.libraryDir + "client/storage/storage.class");
	game.System.Client.Weapon = 				game.System.Client	waitthread __NewClass "Weapon" (game.System.libraryDir + "client/weapon/weapon.class");
	game.System.Client.PersistenceProtocol = 	game.System.Client	waitthread __NewClass "ClientPersistenceProtocol" (game.System.libraryDir + "client/persistprotocol/persistprotocol.class");
	game.System.Client.TransmissionProtocol = 	game.System.Client	waitthread __NewClass "ClientTransmissionProtocol" (game.System.libraryDir + "client/transmitprotocol/transmitprotocol.class");
	game.System.InternetProtocol = 				game.System			waitthread __NewClass "InternetProtocol" (game.System.libraryDir + "internetprotocol/internetprotocol.class");
	
	game.System.Entity = 						game.System			waitthread __NewClass "Entity" (game.System.libraryDir + "entity/entity.class");
	//game.System.Audio = 						game.System			waitthread __NewClass "Audio" (game.System.libraryDir + "audio/audio.class");
	game.System.Map =							game.System			waitthread __NewClass "Map" (game.System.libraryDir + "map/map.class");
	game.System.Map.Locations = 				game.System.Map		waitthread __NewClass "Locations" (game.System.libraryDir + "map/locations/locations.class");
	game.System.HUD = 							game.System			waitthread __NewClass "HUD" (game.System.libraryDir + "hud/hud.class");
	game.System.HUD.ServerMenu = 				game.System.HUD		waitthread __NewClass "ServerMenu" (game.System.libraryDir + "hud/servermenu/servermenu.class");
	game.System.HUD.GlobalWidget = 				game.System.HUD		waitthread __NewClass "GlobalWidget" (game.System.libraryDir + "hud/globalwidget/globalwidget.class");
end;

__InitEnumerations:
	game.System.VarType = 						game.System			waitthread __NewEnum "VarType" (game.System.dir + "variabletype.enum");
	game.System.Maths.Float = 					game.System.Maths	waitthread __NewEnum "Float" (game.System.libraryDir + "maths/float.enum");
	game.System.Maths.Int = 					game.System.Maths	waitthread __NewEnum "Int" (game.System.libraryDir + "maths/int.enum");
	game.System.Array.ArrayType = 				game.System.Array	waitthread __NewEnum "ArrayType" (game.System.libraryDir + "array/arraytype.enum");
end;

/*
Class threads lay-out:
	1. __init 
	x. __meta
	x. __finalize
	x. __run
	
	'init' must be the first thread and will initialize all or most of the class.
	'meta' returns some basic info about the file (version, date & author)
	'finalize' will be executed if the initialization was not complete after 'init' and
				the class in question has been included by a user.
				Here a framework class is allowed to freely exploit framework functionality
				such as the Event class or the IO class. Also, here one may asynchronously 
				execute the 'run' routine.
	'run' must be called asynchronously (with thread()/exec()) and is used in case the class
				in question has background tasks like monitoring, managing etc... that 
				is to be repeated.
*/
__NewClass local.name local.filePath:
	if !(local.name) {
		end NULL;
	}
	if !(local.filePath) {
		end NULL;
	}
	
	local.class = local CreateListener;
	local.class.name = string(local.name);
	local.class.objectType = game.System.Object.CLASS;
	local.class.initialized = 0;
	
	if (typeof(local.filePath) == "const array") {
		local.class.path = local.filePath[1];
	} else {
		local.class.path = local.filePath;
	}
	
	if (self) {
		local.parent = self;
	} else {
		local.parent = game.System;
	}
	local.class.parent = local.parent;
	local.class.children[0] = NIL;
	local.parent.children[local.parent.children.size] = local.class;
	
	// Load metadata
	local.class thread local.class.path::__meta;
	// (Pre-)Initialize
	local.class waitthread local.class.path::__init;
end local.class;

/*
Enum lay-out:
	1. __init
		-> defines all constant enumerables to self object
		-> enum properties are written in CAPS.
*/
__NewEnum local.name local.filePath:
	if !(local.name) {
		end NULL;
	}
	if !(local.filePath) {
		end NULL;
	}

	local.enum = local CreateListener;
	local.enum.name = string(local.name);
	local.enum.objectType = game.System.Object.ENUM;
	local.enum.isFlags = 0;

	if (self) {
		local.parent = self;
	} else {
		local.parent = game.System;
	}
	local.enum.parent = local.parent;
	local.parent.children[local.parent.children.size] = local.enum;
	
	// Initialize
	if (typeof(local.filePath) == "const array") {
		local.filePath = local.filePath[1];
	}
	local.enum waitthread local.filePath::__init;
end local.enum;