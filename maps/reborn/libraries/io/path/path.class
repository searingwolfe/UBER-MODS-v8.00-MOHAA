/**
 Medal of Honor: Allied Assault v1.12 REBORN
 ================================================================
 GAME.SYSTEM.IO.PATH CLASS;
 ================================================================
 BY Sor
 VERSION 1.0.0
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net
 ================================================================
*/
__init:
	if !(self && self.objectType == game.System.Object.CLASS) {
		end;
	}
	
	//<functions>
	self.Split = 		self.path::Split;
	//</functions>
	
	//<properties>
	self.directorySeparator = "/";
	//</properties>
	
	self.initialized = 1; // init complete!
end;

__meta:
	self.author = "Sor";
	self.version = 1.0;
end;

/// A path referencing a directory must always end with "/"
// .IsValid()
// .GetInvalidPathChars()
// .GetInvalidFileChars()
// .GetDirectory()
// .GetFileName()
// .GetFileNameWithExt()
// .GetExtension()
// .GetFullPath()
// .GetAbsolutePath() -> with 'main/'
// .GetRandomFileName() 
// .Combine()
// .IsThreadReference() -> also check scriptfile existence
// .IsScriptReference() -> also check scriptfile existence
// .IsExecutableReference() -> also check scriptfile existence

Split local.path:
	if (level.DEBUG) {
		if !(waitthread game.System.String.IsString local.path) {
			conprintf "~^~^~^~ ERROR[System.IO.SplitPath()]: specified path is invalid! ~^~^~^~";
			end;
		}
	}
	
	local.pathSize =  local.path.size;
	local.dir = "";
	local.file = "";

	for (local.i = (local.pathSize - 1); local.i >= 0; local.i--) {
		if (local.path[local.i] == game.System.IO.Directory.separator) {
			// Get file name:
			for (local.j = (local.i + 1); local.j < local.pathSize; local.j++) {
				local.file += string(local.path[local.j]);
			}
			// Get path:
			for (local.j = 0; local.j <= local.i; local.j++) {
				local.dir += string(local.path[local.j]);
			}
			end local.dir::local.file;
		}
	}
end ""::local.path;

/*
BadCharMasks local.path:
	if !(local.path) {
		local.mask["/"] = 1;
	}
	local.mask["\\"] = 1;
	local.mask["?"] = 1;
	local.mask["%"] = 1;
	local.mask["*"] = 1;
	local.mask[":"] = 1;
	local.mask["|"] = 1;
	local.mask["\""] = 1;
	local.mask[">"] = 1;
	local.mask["<"] = 1;
	local.mask[" "] = 1;
end local.mask;
*/