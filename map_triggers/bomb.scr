main local.origin0 local.origin1 local.origin2 local.origin3 local.origin4 local.origin5 local.origin6 local.origin7 local.origin8 local.origin9:

exec global/aliascache_triggersounds.scr giantbomb
exec global/aliascache_triggersounds.scr arty_exp_water

////////////////////////////////////////////////////////////////////////
	
level.giantbomb_time = 2.15 	// time in seconds until bomb reaches the groundtarget destination
level.giantbomb_damage = 250	// explosion damage
level.giantbomb_radius = 425	// explosion radius
level.giantbomb_scale = 3	// bomb scale when launched

level.giantbomb_lightradius1 = 285	// inner light radius for launched bomb, color = ( 1 0 0 )
level.giantbomb_lightradius2 = 785	// outer light radius for launched bomb, color = ( .125 0 .433 )

////////////////////////////////////////////////////////////////////////

level.spot_bbomb[0] = ( local.origin0 ) + ( 0 0 30 )
if(local.origin1 != NIL) { level.spot_bbomb[1] = ( local.origin1 ) + ( 0 0 30 ) }
if(local.origin2 != NIL) { level.spot_bbomb[2] = ( local.origin2 ) + ( 0 0 30 ) }
if(local.origin3 != NIL) { level.spot_bbomb[3] = ( local.origin3 ) + ( 0 0 30 ) }
if(local.origin4 != NIL) { level.spot_bbomb[4] = ( local.origin4 ) + ( 0 0 30 ) }
if(local.origin5 != NIL) { level.spot_bbomb[5] = ( local.origin5 ) + ( 0 0 30 ) }
if(local.origin6 != NIL) { level.spot_bbomb[6] = ( local.origin6 ) + ( 0 0 30 ) }
if(local.origin7 != NIL) { level.spot_bbomb[7] = ( local.origin7 ) + ( 0 0 30 ) }
if(local.origin8 != NIL) { level.spot_bbomb[8] = ( local.origin8 ) + ( 0 0 30 ) }
if(local.origin9 != NIL) { level.spot_bbomb[9] = ( local.origin9 ) + ( 0 0 30 ) }

local.random = randomint(level.spot_bbomb.size )
local.randomold = local.random

local.trig = spawn trigger_use
local.trig.origin = level.spot_bbomb[local.random]
local.trig setsize ( -30 -30 -20 ) ( 30 30 50 )
local.trig setthread boomerweenie
//local.trig message "*** You got a giant bomb! ***"
local.trig wait 0
local.trig delay 0
local.trig.pickedup = 0

local.rocket1 = spawn script_model
local.rocket1 model "AMMO/us_bomb.tik"
local.rocket1.origin = level.spot_bbomb[local.random]
local.rocket1.scale = 1.2
local.rocket1 light 1 0 0 55
//local.rocket1 rotatey 50
//local.rocket1 time 10
local.rocket1 notsolid
//local.rocket1 thread Rotatex // after an unknown amount of map time, the trigger model might stop rotating. flickerrotate.scr fixes this issue.

level waittill spawn

local.rocket1.targetname = ("giantbomb_weapon" + local.rocket1.entnum)
exec global/flickerrotate.scr local.rocket1.targetname ( 0 0 0.75 ) 125 17 17 25
thread glue local.trig local.rocket1 local.random

while(1)
{
	local.trig waittill trigger
	//local.rocket1 hide
	local.trig nottriggerable

	waitframe // allows local.trig.pickedup to update first
	local.randomold = local.random
	local.random = randomint(level.spot_bbomb.size ) 

	if(local.randomold == local.random) { local.random = randomint(level.spot_bbomb.size)
	if(local.randomold == local.random) { local.random = randomint(level.spot_bbomb.size) 
	if(local.randomold == local.random) { local.random = randomint(level.spot_bbomb.size) 
	if(local.randomold == local.random) { local.random = randomint(level.spot_bbomb.size) 
	if(local.randomold == local.random) { local.random = randomint(level.spot_bbomb.size) 
	} } } } }
	
	if(local.trig.pickedup != 0)
	{
		local.rocket1.origin = level.spot_bbomb[local.random]
		local.trig.origin = level.spot_bbomb[local.random]
		local.trig.int = local.random
	}
	local.trig.pickedup = 0
	//local.rocket1 show
	local.trig triggerable
}
end

glue local.trig local.model local.r:

	local.trig.int = local.r
	while(1)
	{
		local.trig.origin = level.spot_bbomb[local.trig.int]
		local.model.origin = level.spot_bbomb[local.trig.int]
		waitframe
	}
end

Rotatex:
	while(self)
	{
		self.angles = (self.angles + ( 05 -03 07 ))
		self light (randomfloat 10 / 100) (randomfloat 10 / 100) (randomfloat 25 / 100 + 0.75) 125
		waitframe
	}
end

boomerweenie:

local.player=parm.other
if(local.player.whileloop != 1) { local.player thread itemnotattached_fix }

if(local.player.isfiredboomerweenie == 1 || local.player.dead == 1)
{
	if(local.player.dead != 1) { local.player iprint "Cannot pick up. You are holding something already." }
	self.pickedup = 0
	self message ""
	end
}

self.pickedup = 1
self message "*** You got a giant bomb! ***"
local.player.isfiredboomerweenie = 1
local.player iprint "*** Hold USE(e) + Right-click to throw a bomb. ***"

//local.player playsound plantbomb1
local.random2 = randomint(4)
if(local.random2 == 0) { local.player playsound bombpickup1 }
if(local.random2 == 1) { local.player playsound bombpickup2 }
if(local.random2 == 2) { local.player playsound bombpickup3 }
if(local.random2 == 3) { local.player playsound bombpickup4 }

ihuddraw_alpha local.player 101 0
ihuddraw_virtualsize local.player 101 1
ihuddraw_alpha local.player 101 .8
ihuddraw_font local.player 101 "verdana-12"
ihuddraw_color local.player 101 0 .85 .85
ihuddraw_rect local.player 101 -175 212 200 14 
ihuddraw_string local.player 101 "Giant Bomb:   Equipped"

if(local.player.isdog == 1)
{
	local.player.dog attachmodel models/AMMO/us_bomb.tik "Bip01 Spine" 0.35 ("bbomb_model_" + local.player.entnum) 1 -1 -1 -1 -1 ( 0 0 -6 )
	$("bbomb_model_" + local.player.entnum).angles = ( 0 90 0 )
}
else
{
	local.player attachmodel models/AMMO/us_bomb.tik "Bip01 R Hand" 0.35 ("bbomb_model_" + local.player.entnum) 1 -1 -1 -1 -1 ( 0 -3 0 )
	$("bbomb_model_" + local.player.entnum).angles = ( 0 90 0 )
}

local.team = local.player.dmteam
local.dog = local.player.isdog
while(isalive local.player && local.player.dmteam == local.team && (local.player.fireheld == 0 || local.player.secfireheld == 0 || local.player.useheld == 0 || local.player.placing_killstreak_old == 1))
{
	if(local.player.isdog == 1 && local.dog != 1)
	{
		$("bbomb_model_" + local.player.entnum) remove
		local.player.dog attachmodel models/AMMO/us_bomb.tik "Bip01 Spine" 0.35 ("bbomb_model_" + local.player.entnum) 1 -1 -1 -1 -1 ( 0 0 -6 )
		for(local.i = 1; local.i <= $("bbomb_model_" + local.player.entnum).size; local.i++) { $("bbomb_model_" + local.player.entnum)[local.i].angles = ( 0 90 0 ) }
		local.dog = 1
	}
	if(local.player.isdog != 1 && local.dog == 1)
	{
		$("bbomb_model_" + local.player.entnum) remove
		local.player attachmodel models/AMMO/us_bomb.tik "Bip01 R Hand" 0.35 ("bbomb_model_" + local.player.entnum) 1 -1 -1 -1 -1 ( 0 -3 0 )
		for(local.i = 1; local.i <= $("bbomb_model_" + local.player.entnum).size; local.i++) { $("bbomb_model_" + local.player.entnum)[local.i].angles = ( 0 90 0 ) }
		local.dog = 0
	}
	waitframe
}

if(local.player == NULL) { end }
if(local.player.dmteam != local.team || local.player.health <= 0)
{
	//local.laser21 remove
	//local.laser22 remove
	$("bbomb_model_" + local.player.entnum) remove
	local.player.isfiredboomerweenie = 0
	local.player.istake=0
	ihuddraw_string local.player 101 ""
}

if(local.player.isfiredboomerweenie == 0)
end

local.groundtarget = spawn script_origin //targetname "bombweap_groundtarget"
local.groundtarget.player_owner = local.player

local.fwd_vec = angles_toforward local.player.viewangles
local.start = local.player gettagposition "eyes bone"

local.range = 20240
ihuddraw_string local.player 101 "Giant Bomb:   Launched"

local.groundtarget.origin = trace (local.start + local.fwd_vec * 64) (local.start + local.fwd_vec * local.range )

	if(local.fwd_vec[2] <= 0) { local.height = local.fwd_vec[2] * 60 }
	if(local.fwd_vec[2] > 0) { local.height = 0 }

	local.sin = (waitthread global/math.scr::sine local.player.angles[1]) * 25   // spawns bomb 25 units in front of player, to avoid collision with player's head.
	local.cos = (waitthread global/math.scr::cosine local.player.angles[1]) * 25 // somehow "notsolid" doesn't fix that issue.

	if(local.fwd_vec[2] < 0.00 && local.fwd_vec[2] > -0.20) { local.pitchangle = (local.fwd_vec[2] * -90) }	// point the bomb upwards or downwards, based on player's pitch angle.
	if(local.fwd_vec[2] <= -0.20) { local.pitchangle = (local.fwd_vec[2] * -90) - 15 }

	if(local.fwd_vec[2] >= 0.00 && local.fwd_vec[2] < 0.20) { local.pitchangle = (local.fwd_vec[2] * -90) }
	if(local.fwd_vec[2] >= 0.20) { local.pitchangle = (local.fwd_vec[2] * -90) + 15 }

	local.laser21 = spawn script_model targetname ("bigbombweap" + local.player.entnum) // make sure these targetnames are different (for blowing up planes),
	local.laser21 model "AMMO/us_bomb.tik"						    // then have a for-loop checking $player.size times for bigbombs.
	local.laser21.origin = local.start + ( local.cos local.sin 25 ) + ( 0 0 local.height )	
	local.laser21.angles = local.player.angles + ( 0 90 local.pitchangle )	// player.angles[2] and player.viewangles[2] are always 0; need to find it elsewhere.
	local.laser21.scale = level.giantbomb_scale				// fwd_vec[2] = 0 when player looks horizontal, -0.999 looking down, 0.999 looking up.
	local.laser21 notsolid							// multiply fwd_vec[2] by -90 to get pitch-angle (Z-angle). No need to equate sin^-1( fwd_vec[2] ).
	local.laser21 light 1 0 0 level.giantbomb_lightradius1

	local.laser22 = spawn script_model
	local.laser22 model "items/cigarette.tik"
	local.laser22.scale = 0.001
	local.laser22.origin = local.laser21.origin
	local.laser22 notsolid
	local.laser22 light .125 0 .433 level.giantbomb_lightradius2
	local.laser22 glue local.laser21

if($("bbomb_model_" + local.player.entnum) != NULL) { $("bbomb_model_" + local.player.entnum) remove }

local.laser21 playsound fireplace1
local.laser21 loopsound timer01 //snd_b_zing12
local.laser22 loopsound fireplace1 //snd_b_zing9
local.originold = local.groundtarget.origin

local.dist = vector_length(local.groundtarget.origin - local.player gettagposition "eyes bone")
local.time = level.giantbomb_time
local.velocity = local.dist / local.time
if(local.velocity > 6500) { local.velocity = 6500 } // if velocity goes above 6500, the bomb may not fly straight anymore.

local.laser21 physics_on
local.laser21 gravity 0
local.laser21.velocity = (angles_toforward ( local.player.viewangles[0] local.player.angles[1] local.player.viewangles[2] )) * local.velocity
local.laser21.player_owner = local.player

local.hitthing = local.player
while(local.hitthing == local.player || (local.player.drivingent != NIL && local.player.drivingent != NULL && local.hitthing == local.player.drivingent) || (local.player.ridingent != NIL && local.player.ridingent != NULL && local.hitthing == local.player.ridingent) || (local.player.flying == 1 && local.hitthing == local.player.plane))
{
	local.laser21 waittill touch
	local.hitthing = parm.other
}
local.laser21.velocity = ( 0 0 0 )

	local.blewup = 1
	for(local.i = 1; local.i <= $player.size; local.i++) 					// use this instead of radiusdamage, so rockets can count as score/kills
	{											// if $player[local.i] cansee local.laser21 360 was removed, since sometimes bomb can be partially inside a wall,
		if(local.laser21 != NULL && (vector_length(local.laser21.origin - $player[local.i].origin) <= level.giantbomb_radius || $player[local.i].flying == 1)) // which now allows giant bombs to kill people through walls
		{
			if(local.player == NIL || local.player == NULL)
			{
				if($player[local.i].driving != 1 && $player[local.i].flying != 1)
				{
					$player[local.i] damage $world level.giantbomb_damage $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0
				}
				else if($player[local.i].drivingent != NIL && $player[local.i].drivingent != NULL)
				{
					if($player[local.i].flying == 1 && local.hitthing == $player[local.i].plane) { $("planehit" + $player[local.i].entnum) damage $world 9999999 $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
					else { $player[local.i].drivingent damage $world level.giantbomb_damage $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
				}
			}
			else if($player[local.i] != local.player && $player[local.i].dmteam == local.player.dmteam && getcvar("g_teamdamage") != "1" && getcvar("g_gametype") != "1") { local.blewup = 0 }
			else
			{
				if($player[local.i].driving != 1 && $player[local.i].flying != 1)
				{
					$player[local.i] damage local.player level.giantbomb_damage local.player (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 // "damage" does not hurt teammates, but scriptbazookaexplosion.tik does
				}
				else if($player[local.i].drivingent != NIL && $player[local.i].drivingent != NULL)
				{
					$player[local.i].drivingent.shooter = local.player
					if($player[local.i].flying == 1 && local.hitthing == $player[local.i].plane) { $("planehit" + $player[local.i].entnum) damage local.player 9999999 local.player (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
					else { $player[local.i].drivingent damage local.player level.giantbomb_damage local.player (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
				}
			}
		}
	}
	for(local.c = 1; local.c <= 999; local.c++)
	{
		if(level.chainreactors[local.c] != NIL && level.chainreactors[local.c] != NULL && vector_length(local.laser21.origin - level.chainreactors[local.c].origin) <= level.giantbomb_radius)
		{
			level.chainreactors[local.c].shooter = local.player
			if(local.player == NIL || local.player == NULL) { level.chainreactors[local.c] damage $world 9999999 $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
			else { level.chainreactors[local.c] damage local.player 9999999 local.player (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 } // 9999999 damage required to ensure that the vehicles are destroyed.
		}
	}

	local.Exp21 = spawn "fx/scriptbazookaexplosion.tik" // also does 250 radiusdamage
	if(local.groundtarget != NULL) { local.Exp21.origin = local.groundtarget.origin }
	if(local.groundtarget == NULL) { local.Exp21.origin = local.originold }
	local.Exp21.scale = 1.7
	local.Exp21 light 1 0 0 600
	local.Exp21 anim start
	local.Exp21.player_owner = local.player
	if(local.blewup != 1) { local.Exp21 radiusdamage 0 }
	else
	{
		local.Exp21 radiusdamage level.giantbomb_damage
		local.Exp21 radius level.giantbomb_radius
	}

	if(level.water_volumes != NIL && level.water_volumes != 0) // if vehicles are inside a water volume, blow them up.
	{
		for(local.v = 1; local.v <= level.water_volumes.size; local.v++)
		{
			local.X_min[local.v] = level.water_volumes[local.v][1][0] + level.water_volumes[local.v][2][0]
			local.X_max[local.v] = level.water_volumes[local.v][1][0] + level.water_volumes[local.v][3][0]
			local.Y_min[local.v] = level.water_volumes[local.v][1][1] + level.water_volumes[local.v][2][1]
			local.Y_max[local.v] = level.water_volumes[local.v][1][1] + level.water_volumes[local.v][3][1]
			local.Z_min[local.v] = level.water_volumes[local.v][1][2] + level.water_volumes[local.v][2][2]
			local.Z_max[local.v] = level.water_volumes[local.v][1][2] + level.water_volumes[local.v][3][2]
			local.origin = local.Exp21.origin
	
			if(int(local.origin[0]) >= local.X_min[local.v] && int(local.origin[0]) <= local.X_max[local.v] && int(local.origin[1]) >= local.Y_min[local.v] && int(local.origin[1]) <= local.Y_max[local.v] && int(local.origin[2]) >= local.Z_min[local.v] && int(local.origin[2]) <= local.Z_max[local.v])
			{
				local.Exp22 = spawn "animate/fx_mortar_water.tik"
				local.waterexp = 1
			}
			else { local.Exp22 = spawn "emitters/mortar_dirt_nosound.tik" targetname "mortar_dirt_nosound" }
		}
	}
	else { local.Exp22 = spawn "emitters/mortar_dirt_nosound.tik" targetname "mortar_dirt_nosound" }

	if(local.groundtarget != NULL) { local.Exp22.origin = local.groundtarget.origin }
	if(local.groundtarget == NULL) { local.Exp22.origin = local.originold }
	local.Exp22.scale = 1.7
	local.Exp22 light 1 .5 0 600
	local.Exp22 anim start
	local.Exp23 = spawn script_model
	local.Exp23 model "fx/barrel_gas_destroyed.tik"
	if(local.groundtarget != NULL) { local.Exp23.origin = local.groundtarget.origin + ( 0 0 35 ) }
	if(local.groundtarget == NULL) { local.Exp23.origin = local.originold }
	local.Exp23.scale = 1
	local.Exp23 anim idle
	if(local.waterexp == 1) { local.Exp22 playsound artyexp_water }
	else { local.Exp22 playsound artyexp_sand }
	ihuddraw_string local.player 101 "Giant Bomb:   Exploded"

exec global/earthquake.scr .35 2 0 0
wait 0.05
local.random2 = randomint(2)
if(local.random2 == 0) { local.Exp21 playsound gastank_explo1 }
if(local.random2 == 1) { local.Exp21 playsound gastank_explo2 }
waitframe

local.player.isfiredboomerweenie=0
ihuddraw_string local.player 101 ""

if(local.Exp21 != NULL) { local.Exp21 remove }
if(local.Exp22 != NULL) { local.Exp22 remove }
if(local.Exp23 != NULL) { local.Exp23 remove }

if(local.laser21 != NULL) { local.laser21 remove }
if(local.laser22 != NULL) { local.laser22 remove }

if(local.groundtarget != NULL) { local.groundtarget remove }
end

////////////////////////////////////////////////////////////////////////

itemnotattached_fix: // only fixes "isfiredboomerweenie" after player dies or changes team.

	self.whileloop = 1
	local.team = self.dmteam

	while(isalive self && self.dmteam == local.team && self.dmteam != "spectator" && level.change_team_score != 1) { wait 0.1 }

	if(self == NULL) { end }
	self.isfiredboomerweenie = 0
	self.whileloop = 0
end