main local.origin0 local.origin1 local.origin2 local.origin3 local.origin4 local.origin5 local.origin6 local.origin7 local.origin8 local.origin9:

exec global/aliascache_triggersounds.scr health

level.spot_health[0] = ( local.origin0 ) + ( 0 0 15 )
if(local.origin1 != NIL) { level.spot_health[1] = ( local.origin1 ) + ( 0 0 15 ) }
if(local.origin2 != NIL) { level.spot_health[2] = ( local.origin2 ) + ( 0 0 15 ) }
if(local.origin3 != NIL) { level.spot_health[3] = ( local.origin3 ) + ( 0 0 15 ) }
if(local.origin4 != NIL) { level.spot_health[4] = ( local.origin4 ) + ( 0 0 15 ) }
if(local.origin5 != NIL) { level.spot_health[5] = ( local.origin5 ) + ( 0 0 15 ) }
if(local.origin6 != NIL) { level.spot_health[6] = ( local.origin6 ) + ( 0 0 15 ) }
if(local.origin7 != NIL) { level.spot_health[7] = ( local.origin7 ) + ( 0 0 15 ) }
if(local.origin8 != NIL) { level.spot_health[8] = ( local.origin8 ) + ( 0 0 15 ) }
if(local.origin9 != NIL) { level.spot_health[9] = ( local.origin9 ) + ( 0 0 15 ) }

local.random = randomint(level.spot_health.size )
local.randomold = local.random

local.marker = spawn script_model targetname "health_boosttrig"
local.marker model "items/item_50_healthbox.tik"
local.marker.origin = level.spot_health[local.random]
local.marker.angles = ( 0 0 0 )
local.marker scale 1.5
//local.marker light 0 0 1 45
local.marker notsolid
//local.marker time 15
//local.marker thread Rotatex

local.marker2 = spawn script_model targetname "health_boosttrig_2"
local.marker2 model "items/item_25_healthbox.tik"
local.marker2.origin = level.spot_health[local.random] + ( 0 0 10 )
local.marker2.angles = ( 0 0 0 )
local.marker2 scale 1.5
//local.marker2 light 0 1 0 100
local.marker2 notsolid
//local.marker2 time 15
//local.marker2 thread Rotatexx

local.trig = spawn trigger_use
local.trig.origin = level.spot_health[local.random]
local.trig setsize ( -30 -30 -20 ) ( 30 30 50 )
//local.trig message "*** Gained +200 health... ****"
local.trig setthread health_give
local.trig.pickedup = 0

exec global/flickerrotate.scr health_boosttrig ( 0 0 .85 ) 50 5 5 15
wait 1
exec global/flickerrotate.scr health_boosttrig_2 ( 0 .85 0 ) 100 5 15 5 1
thread glue local.trig local.marker local.marker2 local.random

while(1)
{
	local.trig waittill trigger
	local.marker hide
	local.marker2 hide
	local.trig nottriggerable

	waitframe // allows local.trig.pickedup to update first
	local.randomold = local.random
	local.random = randomint(level.spot_health.size ) 

	if(local.randomold == local.random) { local.random = randomint(level.spot_health.size) // let's make it damn near impossible to randomize the same location.
	if(local.randomold == local.random) { local.random = randomint(level.spot_health.size) // if there's 10 origins, we have to guess the right spot 10 times.
	if(local.randomold == local.random) { local.random = randomint(level.spot_health.size) // 10^5 = 1 in 100,000 chance.
	if(local.randomold == local.random) { local.random = randomint(level.spot_health.size) 
	if(local.randomold == local.random) { local.random = randomint(level.spot_health.size) 
	} } } } }

	if(local.trig.pickedup != 0)
	{
		local.marker.origin = level.spot_health[local.random] + ( 0 0 10 )
		local.marker2.origin = level.spot_health[local.random]
		local.trig.origin = level.spot_health[local.random]
		local.trig.int = local.random
	}

	wait 0.1
	local.marker show
	local.marker2 show
	local.trig triggerable
}
end

glue local.trig local.model1 local.model2 local.r:

	local.trig.int = local.r
	while(1)
	{
		local.trig.origin = level.spot_health[local.trig.int]
		local.model1.origin = level.spot_health[local.trig.int]
		local.model2.origin = level.spot_health[local.trig.int]
		waitframe
	}
end

health_give:

	local.player = parm.other
	if(local.player.dead == 1)
	{
		self.pickedup = 0
		self message ""
		end
	}
	self.pickedup = 1
	self message "*** Gained +200 health... ****"

	local.player volumedamage -200
	local.player stufftext "say *** Gained +200 Health!!! ***"
	local.player playsound healingnoise
	local.player playsound healingnoise2
	self triggerable
end 

Rotatex:

	while(self)
	{
		self.angles = (self.angles + ( 05 -03 07 ))
		waitframe
	}

end

Rotatexx:

	while(self)
	{
		self.angles = (self.angles + ( -05 03 -07 ))
		waitframe
	}

end
 