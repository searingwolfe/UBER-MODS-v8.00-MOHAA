// file for, shooting. being shot, and weapons

main local.action:

	switch(local.action)
	{
	case "BOMB":
		self zoomoff	
		self waitthread bomb
	break
	case "SHOOT":
		self thread shoot
		self.shooting=1
		wait self.shootdelay
		self.shooting=0
	break
	case "CHANGE_WEAPON":
		self.canchange = 0 
		self thread change_weapon
		wait self.changedelay 
		self.canchange = 1 
	break
	}
end

shoot:

	local.fwd_vec = angles_toforward self.viewangles
	local.start = self gettagposition "eyes bone"
	local.hit = trace (local.start + local.fwd_vec * 64 ) (local.start + local.fwd_vec * 22000 ) 0
	
	switch(self.planeweap)
	{
	case 1: //mg
		self.plane playsound mg42gunsndfire
		self thread checkhit local.hit
	break
	case 2: //30 call
		self.plane playsound jeepsndfire
		self thread checkhit local.hit
	break	
	case 3: 
		self thread rocket local.hit
	break
	default:
		self thread checkhit local.hit
	}
end

checkhit local.place: 

   self thread mgeffect local.place

   for(local.i = 1; local.i <= $player.size; local.i++) 
   { 
      local.player= $player[local.i]    
      if(local.player!=self && local.player != NIL) 
      { 
         local.end_or_not = waitthread team_check local.player self 

         if(local.end_or_not==1) 
         { 
            end //end if same team and team team killing is not on 
         } 

         if(local.player.flying == 1 && local.player.plane != NIL && local.player.plane != NULL) 
         { 

            if(local.player.plane.scale >= .3) 
            { 
               local.hitvec = local.place - local.player.plane.origin 

               local.hitvec_fwd = local.hitvec * local.player.plane.forwardvector 
               local.hitvec_lf = local.hitvec * local.player.plane.leftvector 
               local.hitvec_up = local.hitvec * local.player.plane.upvector 

               local.is_hit_fwd = (abs local.hitvec_fwd) <= 200.0 
               local.is_hit_lf = (abs local.hitvec_lf) <= 200.0 
               local.is_hit_up = local.hitvec_up >= 0.0 && local.hitvec_up <= 35.0 
               local.damage = 20 
            } 
            if(local.player.plane.scale < .3) 
            { 
               local.hitvec = local.place - local.player.plane.origin 

               local.hitvec_fwd = local.hitvec * local.player.plane.forwardvector 
               local.hitvec_lf = local.hitvec * local.player.plane.leftvector 
               local.hitvec_up = local.hitvec * local.player.plane.upvector 


               local.is_hit_fwd = (abs local.hitvec_fwd) <= 120.0 
               local.is_hit_lf = (abs local.hitvec_lf) <= 120.0 
               local.is_hit_up = local.hitvec_up >= 0.0 && local.hitvec_up <= 15.0 
               local.damage = 30 
            } 

         }
	 else if(local.player.driving == 1 && local.player.drivingent != NIL && local.player.drivingent != NULL && local.player.drivingent.targetname == "nebelwerfer_healthtrig")
	 {
		local.damage = 30
		local.player.drivingent.shooter = self
		local.player.drivingent damage self local.damage self local.player.drivingent.origin self.forwardvector (0 0 0) 10 1 18 -1
		local.hit_entity = 1
	 }
         else
         {
            local.hitvec = local.place - local.player.origin 

            local.hitvec_fwd = local.hitvec * local.player.forwardvector 
            local.hitvec_lf = local.hitvec * local.player.leftvector 
            local.hitvec_up = local.hitvec * local.player.upvector 

            local.is_hit_fwd = (abs local.hitvec_fwd) <= 32.0 
            local.is_hit_lf = (abs local.hitvec_lf) <= 32.0 
            local.is_hit_up = local.hitvec_up >= 0.0 && local.hitvec_up <= 92.0 
            local.damage = 45
         }

         if(local.is_hit_fwd && local.is_hit_lf && local.is_hit_up && (local.player.dmteam != self.dmteam || getcvar("g_teamdamage") == "1" && getcvar("g_gametype") == "1"))
         {
		if(local.player.flying != 1 || local.player.turreting == 1)
		{
			local.player damage self local.damage self local.player.origin self.forwardvector (0 0 0) 10 1 18 -1
		}
		if(local.player.flying == 1 && local.player.flying_init != 1 && local.player.plane != NIL && local.player.plane != NULL)
		{
			$("planehit" + local.player.entnum) damage self local.damage self local.player.origin self.forwardvector (0 0 0) 10 1 18 -1
		}
		if(local.player.ridingent != NIL && local.player.ridingent != NULL)
		{
			local.player.ridingent.shooter = self
			local.player.ridingent damage self local.damage self local.player.origin self.forwardvector (0 0 0) 10 1 18 -1
		}
	 	local.hit_entity = 1
         }
      }
   } 
   for(local.i = 1; level.botlastid != NIL && local.i <= level.botlastid; local.i++) 
   { 
      local.player= level.actualbots[local.i] 
      if(local.player!=self && local.player != NIL) 
      { 
         local.end_or_not = waitthread team_check local.player self 

         if(local.end_or_not==1) 
         { 
            end //end if same team and team team killing is not on 
         } 

         local.hitvec = local.place - local.player.origin 

         local.hitvec_fwd = local.hitvec * local.player.forwardvector 
         local.hitvec_lf = local.hitvec * local.player.leftvector 
         local.hitvec_up = local.hitvec * local.player.upvector 

         local.is_hit_fwd = (abs local.hitvec_fwd) <= 32.0 
         local.is_hit_lf = (abs local.hitvec_lf) <= 32.0 
         local.is_hit_up = local.hitvec_up >= 0.0 && local.hitvec_up <= 92.0 
         local.damage = 45 

         if(local.is_hit_fwd && local.is_hit_lf && local.is_hit_up) 
         { 
            local.player damage self local.damage self.plane local.player.origin self.forwardvector (0 0 0) 10 1 18 -1
	    local.hit_entity = 1
         }
      }
   }
   for(local.e = 1; local.e <= $exploder_trigshot.size; local.e++) 
   {
	local.X_min[local.e] = $exploder_trigshot[local.e].origin[0] + $exploder_trigshot[local.e].setsize1[0] - 50 // prevent bullet's radiusdamage from hitting $exploder_trigshot entities.
	local.X_max[local.e] = $exploder_trigshot[local.e].origin[0] + $exploder_trigshot[local.e].setsize2[0] + 50
	local.Y_min[local.e] = $exploder_trigshot[local.e].origin[1] + $exploder_trigshot[local.e].setsize1[1] - 50
	local.Y_max[local.e] = $exploder_trigshot[local.e].origin[1] + $exploder_trigshot[local.e].setsize2[1] + 50
	local.Z_min[local.e] = $exploder_trigshot[local.e].origin[2] + $exploder_trigshot[local.e].setsize1[2] - 50
	local.Z_max[local.e] = $exploder_trigshot[local.e].origin[2] + $exploder_trigshot[local.e].setsize2[2] + 50
	local.origin = local.place
	
	if(int(local.origin[0]) >= local.X_min[local.e] && int(local.origin[0]) <= local.X_max[local.e] && int(local.origin[1]) >= local.Y_min[local.e] && int(local.origin[1]) <= local.Y_max[local.e] && int(local.origin[2]) >= local.Z_min[local.e] && int(local.origin[2]) <= local.Z_max[local.e])
	{
	    local.hit_entity = 1
	}
   }
   if(local.hit_entity != 1) { radiusdamage local.place 30 10 }
end 

team_check local.player local.shooter:
	
	local.gametype = getcvar "g_gametype"
	
	if(local.gametype=="1")
	{
		end 0
	}
	
	local.ff =  getcvar "g_teamdamage"

	if(local.ff=="0")
	{
		if(local.player.dmteam == local.shooter.dmteam)
		{
			end 1
		}
	}
end 0
	
mgeffect local.place:

	if(self.spawnedmg==0)
	{
		self.spawnedmg=1
		if(self.modelpair != 1 && self.modelpair != 2)
		{
			local.left = ( self.plane gettagposition "tag_barrel01")
			self.plane.gunleft = spawn statweapons/mg42_gun_fake.tik "targetname" ("planesmgleft" + self.entnum) spawnflags 1
			self.plane.gunleft.angles = self.plane.angles
			self.plane.gunleft.origin = local.left
			self.plane.gunleft attach self.plane "tag_barrel01"
			self.plane.gunleft setPlayerUsable 0
	
			if(self.dmteam=="axis")
			{
				local.right = ( self.plane gettagposition "tag_barrel02")  
				self.plane.gunright = spawn statweapons/mg42_gun_fake.tik targetname ("planesmgright" + self.entnum) spawnflags 1
				self.plane.gunright.angles = self.plane.angles
				self.plane.gunright.origin = local.right
				self.plane.gunright attach self.plane "tag_barrel02"
				self.plane.gunright setPlayerUsable 0
			}
			else
			{
				local.right = ( self.plane gettagposition "tag_barrel04") 
				self.plane.gunright = spawn statweapons/mg42_gun_fake.tik "targetname" ("planesmgright" + self.entnum) spawnflags 1
				self.plane.gunright.angles = self.plane.angles
				self.plane.gunright.origin = local.right
				self.plane.gunright attach self.plane "tag_barrel04"
				self.plane.gunright setPlayerUsable 0
			}
		}
		if(self.modelpair == 1 || self.modelpair == 2)
		{
			if(self.modelpair == 1)
			{
				local.left_1 = -102 * self.plane.scale
				local.left_2 = -15 * self.plane.scale
				local.left_3 = 106 * self.plane.scale
				local.right_1 = -102 * self.plane.scale
				local.right_2 = -15 * self.plane.scale
				local.right_3 = -45 * self.plane.scale										// ( +backward -forward, +up -down, +left -right )
				self.plane attachmodel statweapons/mg42_gun_fake.tik "Box02" 1 ("planesmgleft_mount" + self.entnum) 1 -1 -1 -1 -1 ( local.left_1 local.left_2 local.left_3 )
				self.plane attachmodel statweapons/mg42_gun_fake.tik "Box02" 1 ("planesmgright_mount" + self.entnum) 1 -1 -1 -1 -1 ( local.right_1 local.right_2 local.right_3 )
				$("planesmgleft_mount" + self.entnum).angles = ( 180 0 -90 )
				$("planesmgright_mount" + self.entnum).angles = ( 180 0 -90 )
			}
			if(self.modelpair == 2)
			{
				local.left_1 = 65 * self.plane.scale
				local.left_2 = 115 * self.plane.scale
				local.left_3 = -364 * self.plane.scale
				local.right_1 = 65 * self.plane.scale
				local.right_2 = 115 * self.plane.scale
				local.right_3 = 364 * self.plane.scale										 // ( +forward -backward, +up -down, +right -left )
				self.plane attachmodel statweapons/mg42_gun_fake.tik "Box02" 1 ("planesmgleft_mount" + self.entnum) 1 -1 -1 -1 -1 ( local.left_1 local.left_2 local.left_3 )
				self.plane attachmodel statweapons/mg42_gun_fake.tik "Box02" 1 ("planesmgright_mount" + self.entnum) 1 -1 -1 -1 -1 ( local.right_1 local.right_2 local.right_3 )
				$("planesmgleft_mount" + self.entnum).angles = ( 180 180 90 )
				$("planesmgright_mount" + self.entnum).angles = ( 180 180 90 )
			}
			$("planesmgleft_mount" + self.entnum) notsolid
			$("planesmgright_mount" + self.entnum) notsolid
			$("planesmgleft_mount" + self.entnum) hide
			$("planesmgright_mount" + self.entnum) hide

			local.left = ( $("planesmgleft_mount" + self.entnum) gettagposition "tag_barrel")
			self.plane.gunleft = spawn statweapons/mg42_gun_fake.tik "targetname" ("planesmgleft" + self.entnum) spawnflags 1
			self.plane.gunleft.angles = self.plane.angles
			self.plane.gunleft.origin = local.left
			self.plane.gunleft attach $("planesmgleft_mount" + self.entnum) "tag_barrel"
			self.plane.gunleft setPlayerUsable 0

			local.right = ( $("planesmgright_mount" + self.entnum) gettagposition "tag_barrel")
			self.plane.gunright = spawn statweapons/mg42_gun_fake.tik "targetname" ("planesmgright" + self.entnum) spawnflags 1
			self.plane.gunright.angles = self.plane.angles
			self.plane.gunright.origin = local.right
			self.plane.gunright attach $("planesmgright_mount" + self.entnum) "tag_barrel"
			self.plane.gunright setPlayerUsable 0
		}

		self.plane.gunright hide
		self.plane.gunleft hide
		self.plane.gunright notsolid
		self.plane.gunleft notsolid
	}

	local.org = spawn script_origin 
	local.org.origin = local.place

	self.plane.gunright.angles = self.viewangles
	self.plane.gunleft.angles = self.viewangles

	self.plane.gunright setaimtarget local.org
	self.plane.gunleft setaimtarget local.org

	self.plane.gunleft anim fire
	self.plane.gunright anim fire

	local.org remove
	//self.plane anim blast
end

////////////shot down////////////

shotdown_setup:
	local.shoot = spawn trigger_multiple "spawnflags" "128" "targetname" ("planehit" + self.entnum)
	local.m = self.plane.scale

	local.setsize1_1 = -670.000 * local.m // c47 planes
	local.setsize1_2 = -230.000 * local.m
	local.setsize1_3 = 0
	local.setsize2_1 = 355.000 * local.m 
	local.setsize2_2 = 230.000 * local.m
	local.setsize2_3 = 165.000 * local.m

	local.setsize3_1 = -260.000 * local.m // all other planes
	local.setsize3_2 = -100.000 * local.m
	local.setsize3_3 = -32.000 * local.m
	local.setsize4_1 = 180.000 * local.m 
	local.setsize4_2 = 100.000 * local.m
	local.setsize4_3 = 32.000 * local.m

	if(self.plane.model == "models/vehicles/c47fly.tik")
	{
		local.shoot setsize ( local.setsize1_1 local.setsize1_2 local.setsize1_3 ) ( local.setsize2_1 local.setsize2_2 local.setsize2_3 )
	}
	else
	{
		local.shoot setsize ( local.setsize3_1 local.setsize3_2 local.setsize3_3 ) ( local.setsize4_1 local.setsize4_2 local.setsize4_3 )
	}

	local.shoot.origin = self.plane.origin
	local.shoot setthread shotdown
	self.shottrig = local.shoot
	local.shoot bind self.plane
end
		
shotdown:

	if(self != parm.other.shottrig && parm.other != $("world"))
	{
		local.player= parm.other

		if(local.player!=NULL || isalive local.player)
		{
			for(local.i = 1; local.i <= $player.size; local.i++)
			{
				if($player[local.i].shottrig == self)
				{

					local.end_or_not = waitthread team_check $player[local.i] local.player
		
					if(local.end_or_not==1)
					{
						end //end if same team and team team killing is not on
					}

					$player[local.i] damage local.player level.plane_hit_damage local.player $player[local.i].origin local.player.forwardvector (0 0 0) 10 1 0 -1
					end
				}
			}
			
		}
	}
end


////////////^^shot down////////////


rocket local.pos:

	self.rocketside++
	if(self.rocketside>2)
	{
		self.rocketside=1
	}

	if(self.rocket_ammo==0)
	{
		self iprint "0 Rockets"
		self playsound bazookasndnoammo
		end
	}

	self.rocket_ammo--

	self iprint ("Fired Rocket " + self.rocket_ammo)

	self playsound bazookasndfire 

	local.left = self.plane.angles[1] + 90
	local.right = self.plane.angles[1] - 90

	if(self.modelpair != 2) { local.sidewaysdist = 75 * self.plane.scale }	// for p47, fockwulf, stuka, stuka_dsrt
	if(self.modelpair == 2)							// for c47
	{ 
		self.inc++
		if(self.inc == NIL || self.inc > 3) { self.inc = 0 }
		if(self.inc == 0 || self.inc == 1) { local.sidewaysdist = 400 * self.plane.scale }
		if(self.inc == 2 || self.inc == 3) { local.sidewaysdist = 200 * self.plane.scale }
	}
		
	local.sinl = (waitthread global/math.scr::sine local.left) * local.sidewaysdist
	local.cosl = (waitthread global/math.scr::cosine local.left) * local.sidewaysdist

	local.sinr = (waitthread global/math.scr::sine local.right) * local.sidewaysdist
	local.cosr = (waitthread global/math.scr::cosine local.right) * local.sidewaysdist

	if(self.rocketside==1) { local.place = self.plane.origin + ( local.cosl local.sinl 0 ) }
	else { local.place = self.plane.origin + ( local.cosr local.sinr 0 ) }

	local.shell = spawn script_model "model" "projectiles/bazookashell_dm.tik" //"milkshape/missile/missile.tik"
	local.shell.angles = ( (self.plane.angles[0] * -1) (self.plane.angles[1] + 180) self.plane.angles[2] )
	local.shell.origin = local.place
	local.shell notsolid //if they are solid when they hit things like tanks or anyhting that gets in the way it makes bashes it out the way
	if(self.plane.model == "models/vehicles/c47fly.tik") { local.shell.scale = self.plane.scale * 1.500 }
	else { local.shell.scale = self.plane.scale }

	local.speed = sqrt (self.plane.velocity[0] * self.plane.velocity[0] + self.plane.velocity[1] * self.plane.velocity[1] + self.plane.velocity[2] * self.plane.velocity[2])
	local.shell speed (2000 + local.speed)

	local.shell moveto local.pos
	local.shell waitmove	
	self thread explode local.shell.origin local.shell 16
end

change_weapon:
	self.planeweap++

	if(self.planeweap > 3)
	{
		self.planeweap=1
	}	

	switch(self.planeweap)
	{
	case 1: //mg
		self iprint ("Using MG") 1	
	break
	case 2:
		self iprint ("Using 30 Cal") 1
	break
	case 3:
		self iprint ("Using Rockets") 1
	break
	default:
		self iprint ("Using MG") 1
	}
end

explode local.explosionplace local.projectile local.damagetype: 

   local.projectile thread bang local.explosionplace
   local.radius = 200.00 * 200.00 

   for(local.i = 1; level.botlastid != NIL && local.i <= level.botlastid; local.i++) 
   { 
      local.player= level.actualbots[local.i] 
      local.distance = (local.player.origin - local.explosionplace) * (local.player.origin - local.explosionplace)  

      if(local.distance <= local.radius) 
      { 
         if(local.player != self) 
         { 
            local.end_or_not = waitthread team_check local.player self 
       
            if(local.end_or_not==1) 
            { 
               end //end if same team and team team killing is not on 
            } 

            local.dmg_fact = 1 - local.distance / local.radius 
            local.dmg = 250 * local.dmg_fact + 30 
            local.player damage self local.dmg self (0 0 0) (0 0 0) (0 0 0) 0 1 local.damagetype -1 
         } 
      } 

   }

   local.blewup = 1
   for(local.i = 1; local.i <= $player.size; local.i++)
   {
	if(vector_length(local.explosionplace - $player[local.i].origin) <= 200)
	{
		if(self == NIL || self == NULL)
		{
			if($player[local.i].driving != 1 && $player[local.i].flying != 1 && $player[local.i] cansee local.projectile 360)
			{
				if(local.projectile istouching $player[local.i]) { $player[local.i] damage $world 250 $world (0 0 0) (0 0 0) (0 0 0) 0 1 local.damagetype 2 }
				else { $player[local.i] damage $world 250 $world (0 0 0) (0 0 0) (0 0 0) 0 1 9 -1 }
			}
			else if($player[local.i].drivingent != NIL && $player[local.i].drivingent != NULL)
			{
				if($player[local.i].flying == 1) { $("planehit" + $player[local.i].entnum) damage $world 250 $world (0 0 0) (0 0 0) (0 0 0) 0 1 9 -1 }
				else { $player[local.i].drivingent damage $world 250 $world (0 0 0) (0 0 0) (0 0 0) 0 1 9 -1 }
			}
		}
		else if($player[local.i] != self && $player[local.i].dmteam == self.dmteam && getcvar("g_teamdamage") != "1" && getcvar("g_gametype") != "1") { local.blewup = 0 }
		else
		{
			if($player[local.i].driving != 1 && $player[local.i].flying != 1 && $player[local.i] cansee local.projectile 360)
			{
				if(local.projectile istouching $player[local.i]) { $player[local.i] damage self 250 self (0 0 0) (0 0 0) (0 0 0) 0 1 local.damagetype 2 } // "damage" does not hurt teammates, but scriptbazookaexplosion.tik does
				else { $player[local.i] damage self 250 self (0 0 0) (0 0 0) (0 0 0) 0 1 9 -1 }
			}
			else if($player[local.i].drivingent != NIL && $player[local.i].drivingent != NULL)
			{
				$player[local.i].drivingent.shooter = self
				if($player[local.i].flying == 1) { $("planehit" + $player[local.i].entnum) damage self 250 self (0 0 0) (0 0 0) (0 0 0) 0 1 9 -1 }
				else { $player[local.i].drivingent damage self 250 self (0 0 0) (0 0 0) (0 0 0) 0 1 9 -1 }
			}
		}
	}
   }
   local.projectile remove
   waitframe
   if(local.blewup == 1) { radiusdamage local.explosionplace 250 200 } // 110 200
end

bang local.place:

	if(self.model == "models/ammo/us_bomb.tik")
	{
		if(self.hitwater == 1)		
		{
			local.Exp4 = spawn "animate/fx_mortar_water.tik" //targetname "mortar_dirt_nosound"
			local.Exp4 anim start
			local.Exp4 playsound artyexp_water
		}
		else
		{
			local.Exp4 = spawn "emitters/mortar_dirt_nosound.tik" targetname "mortar_dirt_nosound"
			local.Exp4 anim start
			local.Exp4 playsound artyexp_sand	
		}
	}
	else
	{
		local.Exp4 = spawn "fx/explosionPANZERIVshell.tik"
		local.Exp4 anim idle
		//local.Exp4 playsound bazookaexp // panzerIVshell already has an explosion sound
	}
	//local.Exp4 radiusdamage 0
	local.Exp4.origin = local.place

	waitframe
	local.Exp4 remove
end

bomb:

	if(self.plane == NIL || self.plane == NULL) { end }
	if(self.candrop==0)
	{
		self iprint "No bombs"
		self playsound bazookasndnoammo
		end
	}

	self iprint ("Bombs: " + self.candrop)
	self.candrop--

	local.bomb = spawn script_model "targetname" "planebomb"
	local.bomb model "ammo/us_bomb.tik" 
	local.bomb.origin = self.plane.origin - ( 0 0 50 )
	local.bomb.angles = ( self.plane.angles + ( 0 90 0 ) )
	local.bomb notsolid
	if(self.plane.model == "models/vehicles/c47fly.tik") { local.bomb.scale = self.plane.scale * 1.500 }
	else { local.bomb.scale = self.plane.scale }

	thread bombtwist local.bomb
	local.bomb physics_on

	local.bomb.velocity = self.plane.velocity 
	local.bomb playsound leadinmp2
	local.didnt=1

	local.bomb thread waittill_touch local self
	while(local.didnt==1)
	{
		local.bomb waittill touch
		if!(parm.other==self || parm.other == self.plane)
		{
			local.didnt=0
		}
	}
	local.bomb.velocity = ( 0 0 0 )
	
	if(local.bomb.hitwater != 1) { self thread explode local.bomb.origin local.bomb 9 }
end

bombtwist local.bomb:

	for(local.i=0;local.i<=90 ;local.i+=5)
	{

		waitframe
		if(local.bomb == NIL || local.bomb == NULL)
		{
			end
		}
		else
		{
			local.bomb.angles = (  local.bomb.angles[0] local.bomb.angles[1] local.i )
		}
	}
end

////////////////////////////////////////////////////////////////////////

waittill_touch local.thread local.player:

	while(1)
	{
		if(self == NULL || vector_length(self.origin) > 12000) // if moving outside the map or NULL.
		{
			if(local.thread != NULL) { local.thread remove } // prematurely end "waittill touch" and its thread (nothing else runs after it).
			if(self != NULL) { self remove }
			end
		}

		if(self.velocity == ( 0 0 0 )) { end }

		if(self.hitwater != 1 && level.water_volumes != NIL && level.water_volumes != 0)
		{
			for(local.v = 1; local.v <= level.water_volumes.size; local.v++)
			{
				local.X_min[local.v] = level.water_volumes[local.v][1][0] + level.water_volumes[local.v][2][0]
				local.X_max[local.v] = level.water_volumes[local.v][1][0] + level.water_volumes[local.v][3][0]
				local.Y_min[local.v] = level.water_volumes[local.v][1][1] + level.water_volumes[local.v][2][1]
				local.Y_max[local.v] = level.water_volumes[local.v][1][1] + level.water_volumes[local.v][3][1]
				local.Z_min[local.v] = level.water_volumes[local.v][1][2] + level.water_volumes[local.v][2][2]
				local.Z_max[local.v] = level.water_volumes[local.v][1][2] + level.water_volumes[local.v][3][2] + 50 // moving very fast may explode slightly above the actual water.
				local.origin = self.origin
	
				if(int(local.origin[0]) >= local.X_min[local.v] && int(local.origin[0]) <= local.X_max[local.v] && int(local.origin[1]) >= local.Y_min[local.v] && int(local.origin[1]) <= local.Y_max[local.v] && int(local.origin[2]) >= local.Z_min[local.v] && int(local.origin[2]) <= local.Z_max[local.v])
				{
					self.hitwater = 1
					self.velocity = ( 0 0 0 )
					if(local.thread != NULL) { local.thread remove }

					if(self.model == "models/ammo/us_bomb.tik") { local.player thread explode self.origin self 9 }
					else { local.player thread explode self.origin self 16 }
					end
				}
			}
		}
		waitframe
	}
end