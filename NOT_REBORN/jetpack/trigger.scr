main local.origin:

exec global/aliascache_triggersounds.scr jetpack

////////////////////////////////////////////////////////////////////////
	
level.jetpack_max_fuel = 200 	// set max fuel
level.fueltime_charge =  2.0	// how long while player is on the ground, until fuel increases by 1.
level.fueltime_float = 	 0.5	// how long while player is floating in the air, until fuel decreases by 1.
level.fueltime_thrust =  0.1	// how long while player is thrusting (holding USE offground), until fuel decreases by 1 (all 3 cannot be lower than 0.1 seconds).

////////////////////////////////////////////////////////////////////////

	level.fueltime_charge = level.fueltime_charge * 10
	level.fueltime_float = level.fueltime_float * 10
	level.fueltime_thrust = level.fueltime_thrust * 10

	if(local.origin == NIL) { println("----- ERROR jetpack/trigger.scr: 'origin' parameter is missing!"); end }

	local.airtank = spawn trigger_multiple
	local.airtank model "static/static_airtank.tik" 
	local.airtank.origin = local.origin + ( 0 0 50 )
	local.airtank setsize ( -40 -40 -40 ) ( 40 40 40 ) 
	local.airtank.scale = .75
	local.airtank show
	//local.airtank notsolid // notsolid and ghost don't work with setthreads. if the model is a spawned trigger, then it's notsolid by default.
	//local.airtank ghost
	//local.airtank light 1 1 0 125
	local.airtank.wait = 1

	local.airtank2 = spawn script_model
	local.airtank2 model "static/static_airtank.tik" 
	local.airtank2.origin = local.origin + ( 0 0 50 )
	local.airtank2.scale = .75
	local.airtank2 notsolid
	local.airtank2 light 1 0 0 50

	local.airtank setthread fly
	
	//level waittill spawn 

	local.airtank.targetname = ("jetpacktrig" + local.airtank.entnum)
	local.airtank2.targetname = (local.airtank.targetname + "_2")

	local.airtank attachmodel models/emitters/pipe_steam.tik "Box01" 1 (local.airtank.targetname + "_3") 1 -1 -1 -1 -1 ( 0 40 0 ) //( +left -right, +up -down, +forward -backward )
	$(local.airtank.targetname + "_3").angles = ( 0 90 0 )
	local.airtank2 attachmodel models/emitters/pipe_steam.tik "Box01" 1 (local.airtank.targetname + "_4") 1 -1 -1 -1 -1 ( 0 40 0 ) //( +left -right, +up -down, +forward -backward )
	$(local.airtank.targetname + "_4").angles = ( 0 90 0 )

	exec global/flickerrotate.scr local.airtank.targetname ( .9 .9 0 ) 125 10 10 5
	wait 1
	exec global/flickerrotate.scr local.airtank2.targetname ( .9 0 0 ) 50 10 5 5 1
end

fly local.jetpackfuel:
	local.player = parm.other
	if(local.player == self) { local.redo = 1 } // only if a player with jetpacks becomes a dog, or vise versa.
	
	if(isalive local.player && local.player.dead != 1 && local.player.using_pack != 1 && local.player.OWNS != 1 && local.player.dmteam != "spectator" && local.player.driving != 1 && local.player.flying != 1 && local.player.riding != 1 && local.player.turreting != 1)
	{
		local.player waitthread airtank local.player.isdog local.redo 	// Give the player an airtank
		local.player thread jetpack local.jetpackfuel			// start the main loop, check for player stuff
	}
	else if(local.player.using_pack == 1)
	{
		local.player.jetpack.fuel = level.jetpack_max_fuel 
		local.player stufftext ("set fuel " + level.jetpack_max_fuel )
	}
end

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

jetpack local.jetpackfuel:

	if(self == NULL || self.using_pack_already == 1)
	{
		end //already running the rest so go home.
	}
	if(self.jetpack == NIL || self.jetpack == NULL) { end }

	self.using_pack_already = 1 //set them to using a jetpack in this script

	if(local.jetpackfuel != NIL) { self.jetpack.fuel = local.jetpackfuel }
	else { self.jetpack.fuel = level.jetpack_max_fuel } // give them max fuel
	
	local.a = 0
	local.b = 0
	local.c = 0		
	local.team = self.dmteam // Set team
	local.isdog = self.isdog

  	while(isalive self && self.jetpack != NIL && self.jetpack != NULL && self.jetpack.fuel > 0 && self.dmteam == local.team && self.dmteam != "spectator" && self.isdog == local.isdog) //start main loop 
	{
		if(self == NULL) { end }
		if(self.flying == 1 || self.missile != NIL) { break } // if the player gets into a plane or guided missile, remove the jetpack.

		local.position = self getposition // these are found in global/mike_legs.st (moveposflags "movement" "position") 
		local.movement = self getmovement // note: after jumping, position = crouching for about 0.25 seconds before position = offground.
						  // it's fast enough, so "if player's z-origin is greater than old z-origin, then position = offground" is not needed.

		if(self.useheld != 1 && local.position == offground)
		{ 
			self stoploopsound
			self stopsound
			self loopsound jetpack

			self.jetpack.smoke[1] anim start
			self.jetpack.smoke[2] anim start	
			self.jetpack.smoke[1].scale = 0.2
			self.jetpack.smoke[2].scale = 0.2
			self gravity .2

			if(local.b >= level.fueltime_float && self.jetpack.fuel > 0) { self.jetpack.fuel-- }
		}
		if(self.useheld == 1 && local.position == offground)
		{ 
			self stoploopsound
			self thread jetpack_thrust

			self.jetpack.smoke[1] anim start
			self.jetpack.smoke[2] anim start	
			self.jetpack.smoke[1].scale = 1.0 // some effect on smoke, make it big and puffy
			self.jetpack.smoke[2].scale = 1.0

			self.velocity += self.upvector * 27	   // if 20 or lower, player cannot fly upwards very well
			self.velocity += self.forwardvector * 27   // if 35 or higher, player flies a bit too fast
			self gravity .2				   // got rid of leftvector and rightvector, so player must rotate himself to change thrust direction.

			if(local.c >= level.fueltime_thrust && self.jetpack.fuel > 0) { self.jetpack.fuel-- }
		}	
		if(local.position != offground)
		{
			self stoploopsound
			self.jetpack.smoke[1] anim stop
			self.jetpack.smoke[2] anim stop
			self gravity 1

			if(local.a >= level.fueltime_charge && self.jetpack.fuel < level.jetpack_max_fuel) { self.jetpack.fuel++ }
		}

		if(self.jetpack.fuel <= 0 ) { self stufftext ("set fuel Empty") }

		if(self.jetpack.fuel >= 0 && self.jetpack.fuel <= level.jetpack_max_fuel ) { self stufftext ("set fuel " + self.jetpack.fuel) }
		local.jetpackfuel = self.jetpack.fuel

		wait 0.1
		if(local.a >= level.fueltime_charge) { local.a = 0 }
		if(local.a < level.fueltime_charge) { local.a++ } // all timers are set here, 10x per second thanks to "wait 0.1".
		if(local.b >= level.fueltime_float) { local.b = 0 }
		if(local.b < level.fueltime_float) { local.b++ }
		if(local.c >= level.fueltime_thrust) { local.c = 0 }
		if(local.c < level.fueltime_thrust) { local.c++ }
	}
	if(self == NULL) { end }

	self gravity 1
	self stoploopsound

	waitthread delete_tank local.isdog local.jetpackfuel // "self thread ..." not required when starting new threads, since "self" is already included in the "jetpack" thread.
		
	self.using_pack = 0
	self.using_pack_already = 0

	if(isalive self && self.dmteam == local.team && self.dmteam != "spectator" && self.isdog != local.isdog)
	{
		self thread fly local.jetpackfuel // self goto fly
		end
	}

	if(self.missile == NIL)
	{
		if(game.game == "AA") 	//hide the hud
		{
			self stufftext "hidemenu dday1"
			self stufftext "hidemenu dday2"
		}
		else
		{
			self stufftext "hidemenu bastogne2"
			self stufftext "hidemenu bastogne1"
		}
	}
end

jetpack_thrust: // play the thrust sound rapidly. much faster than playing every 0.1 seconds, and sounds better.
	
	if(self.thrusting == 1) { end }		  	// need a temp script model to spam playsound, but stopsound does not immediately stop the sound.
 							// since all these playsounds will be combining together, you don't want this model to be around long enough for anyone to hear that loud noise.
	local.temp = spawn script_model			// the model is deleted when thrusting is done, the only way to immediately stopsound. 
	local.temp model "static/corona_util.tik"
	if(self.dog != NIL && self.dog != NULL) { local.temp.origin = self.dog gettagposition "Bip01 Spine" }
	else { local.temp.origin = self gettagposition "Bip01 Spine" }
	local.temp.scale = 0.001
	local.temp notsolid
	local.temp light 1 1 1 60
	if(self.dog != NIL && self.dog != NULL) { local.temp glue self.dog }
	else { local.temp glue self }

	self.thrusting = 1
	local.team = self.dmteam
	local.position = self getposition
	local.isdog = self.isdog
	
	while(isalive self && self.useheld == 1 && local.position == offground && self.using_pack == 1 && self.dmteam == local.team && self.isdog == local.isdog) 
	{
		local.position = self getposition
		local.temp playsound jetpack_thrust
		waitframe
	}

	local.temp remove
	self.thrusting = 0
end

delete_tank local.isdog local.jetpackfuel:

	if(local.isdog == 1 && local.jetpackfuel > 0) { end } // end, since the attachmodels will get removed once the dog model is removed.

	self.jetpack.smoke[1] delete
	self.jetpack.smoke[2] delete
	self.jetpack.twin delete
	self.jetpack delete
end

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

airtank local.dog local.redo:

	if(local.redo != 1)
	{
		if(self == NULL || self.using_pack == 1) { end }

		self iprint "Slowly charge while grounded. Full recharge at the trigger."
		self iprint "*** Jump + hold USE to use the jetpack. ***" //Inform them on how to use the damn thing
	}
	self.using_pack = 1

	if(local.dog == 1)
	{
		local.entity = self.dog
		self.isdog_jetpacking = 1
	}
	else
	{
		local.entity = self
		self.isdog_jetpacking = 0
	}

	local.team = self.dmteam
	waitframe	 // wait for $Pairtank to get removed first
	if(self == NULL || !isalive self || self.dmteam != local.team) { end }

	local.model = "models/static/static_airtank.tik"

	local.entity attachmodel local.model "Bip01 Spine" 0.5 ("Pairtank" + self.entnum) 1 -1 -1 -1 -1 ( 25 -5 3 )
	$("Pairtank" + self.entnum).angles = ( 270 0 4 )
      	
	local.entity attachmodel local.model "Bip01 Spine" 0.5 ("Pairtank2" + self.entnum) 1 -1 -1 -1 -1 ( 25 -5 -4 )
	$("Pairtank2" + self.entnum).angles = ( 270 0 3 )

	 	/* causes vertex error , looks gd but cant be bothered with spam
		local.model = "models/static/switch2.tik"

 		local.entity attachmodel local.model "Bip01 Spine" 0.5 "airswitch2" 1 -1 -1 -1 -1 ( 15 -5 -1 )
		$airswitch2.angles = ( 180 90 90 )

		local.model = "models/static/switch1.tik"	   

 		local.entity attachmodel local.model "Bip01 Spine" 0.5 "airswitch" 1 -1 -1 -1 -1 ( 21 -7 -1 )
		$airswitch.angles = ( 180 90 90 )
		*/

	local.model = "emitters/pipe_steam.tik"
 	local.entity attachmodel local.model "Bip01 Spine" 0.1 ("tankemitter" + self.entnum) 1 -1 -1 -1 -1 ( 0 -10 3 )
	$("tankemitter" + self.entnum).angles = ( -15 -180 0 )
	$("tankemitter" + self.entnum) anim stop
										    
	local.model = "emitters/pipe_steam.tik"
 	local.entity attachmodel local.model "Bip01 Spine" 0.1 ("tankemitter2" + self.entnum) 1 -1 -1 -1 -1 ( 0 -10 -4 )
	$("tankemitter2" + self.entnum).angles = ( 15 -180 0 )
	$("tankemitter2" + self.entnum) anim stop
				 
	local.smoke  = $("tankemitter" + self.entnum)
	local.smoke2 = $("tankemitter2" + self.entnum)
	$("Pairtank" + self.entnum).smoke = ( local.smoke::local.smoke2 )
	
	//$Pairtank.switches = ( 	$airswitch2::$airswitch ) //associate these models with the tank so we can delete them all later
	
	$("Pairtank" + self.entnum).twin = $("Pairtank2" + self.entnum) //associate the second tank with first.
	
	self.jetpack = $("Pairtank" + self.entnum) //associate these models with the player

	if(local.redo != 1) { thread display } //display a widget statebar fuel hud	 
end	

display:

	if(game.game != "AA") { local.menu1 = "bastogne1"; local.menu2 = "bastogne2" }
	else { local.menu1 = "dday1"; local.menu2 = "dday2" }

	self stufftext ("globalwidgetcommand " + local.menu1 + " shader townhallwindow")
	self stufftext ("globalwidgetcommand " + local.menu1 + " fgcolor 1.00 1.00 1.00 1.00")
	self stufftext ("globalwidgetcommand " + local.menu1 + " bgcolor 0.50 0.50 0.50 0.00")
	self stufftext ("globalwidgetcommand " + local.menu1 + " fadein 0")
	self stufftext ("globalwidgetcommand " + local.menu1 + " menu dday1 640 480 NONE 0")
	self stufftext ("globalwidgetcommand " + local.menu1 + " virtualres 1")
	self stufftext ("globalwidgetcommand " + local.menu1 + " fullscreen 1")

	self stufftext "globalwidgetcommand june6 borderstyle NONE"
	self stufftext "globalwidgetcommand june6 shader textures/hud/healthback"
	self stufftext "globalwidgetcommand june6 rect 16 420 16 64"
	self stufftext "globalwidgetcommand june6 fgcolor 1.00 1.00 1.00 1.00"
	self stufftext "globalwidgetcommand june6 bgcolor 0.00 0.00 0.00 0.00"
	self stufftext "globalwidgetcommand june6 linkcvar fuel"
	self stufftext ("globalwidgetcommand june6 statbar vertical 0 " + level.jetpack_max_fuel )
	self stufftext "globalwidgetcommand june6 statbar_shader textures/hud/healthmeter"
	self stufftext "globalwidgetcommand june6 statbar_shader_flash textures/hud/healthmeterflash"

	self stufftext ("globalwidgetcommand " + local.menu2 + " fgcolor 1.00 1.00 1.00 1.00")
	self stufftext ("globalwidgetcommand " + local.menu2 + " bgcolor 0.50 0.50 0.50 0.00")
	self stufftext ("globalwidgetcommand " + local.menu2 + " fadein 0")
	self stufftext ("globalwidgetcommand " + local.menu2 + " menu dday2 640 480 NONE 0")
	self stufftext ("globalwidgetcommand " + local.menu2 + " virtualres 1")
	self stufftext ("globalwidgetcommand " + local.menu2 + " fullscreen 1")

	self stufftext "globalwidgetcommand charliesector borderstyle NONE"
	self stufftext "globalwidgetcommand charliesector textalign left " 
	self stufftext "globalwidgetcommand charliesector rect 40 470 150 20"
	self stufftext "globalwidgetcommand charliesector fgcolor 0.70 0.60 0.05 1.00"
	self stufftext "globalwidgetcommand charliesector bgcolor 0.00 0.00 0.00 0.00"
	self stufftext "globalwidgetcommand charliesector linkcvar fuel"
	self stufftext "globalwidgetcommand charliesector font facfont-20"
	self stufftext "globalwidgetcommand charliesector shader townhallwindow"

	self stufftext ("showmenu " + local.menu2)
	self stufftext ("showmenu " + local.menu1)
	self stufftext ("set fuel " + level.jetpack_max_fuel )
end

