/**
 Medal of Honor: Allied Assault v1.12 REBORN
 ================================================================
 GAME.SYSTEM.COMMON CLASS;
 ================================================================
 BY Sor
 VERSION 1.1.0
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net
 ================================================================
*/
// Update when $Array is done
__init:
	if !(self && self.objectType == game.System.Object.CLASS) {
		end;
	}
	
	//<functions>
	self.AreTypesCompatible = 	self.path::AreTypesCompatible;
	self.WrapInteger = 			self.path::WrapInteger;
	
	// Wrapper functions for extended casting 
	self.CastToBool = 			self.path::CastToBool;
	self.CastToInteger = 		self.path::CastToInt;
	self.CastToFloat = 			self.path::CastToFloat;
	self.CastToVector = 		self.path::CastToVector;
	self.CastToArray = 			self.path::CastToArray;
	self.CastToChar = 			self.path::CastToChar;
	self.CastToString = 		self.path::CastToString;
	self.CastToEntity = 		self.path::CastToEntity;
	
	// Wrapper functions for common binary 'flag word' operations 
	self.IsBitSet = 			self.path::IsBitSet;
	self.SetBit = 				self.path::SetBit;
	self.ClearBit = 			self.path::ClearBit;
	self.ToggleBit = 			self.path::ToggleBit;
	self.IsMaskSet = 			self.path::IsMaskSet;
	self.SetMask = 				self.path::SetMask;
	self.ClearMask = 			self.path::ClearMask;
	self.ToggleMask = 			self.path::ToggleMask;
	
	// Perhaps move the pointers (but not the script) to the string class?
	self.GetNumericMasks = 		self.path::GetNumericMasks;
	//</functions>
	
	self.initialized = 1; // init complete!
end;

__meta:
	self.author = "Sor";
	self.version = 1.1;
end;

WrapInteger local.x local.lower local.upper:
	local.range = local.upper - local.lower + 1;
	local.kx = ((local.x+local.lower)%local.range);
	if (local.kx < 0) {
		end (local.upper + 1 + local.kx)
	}
end (local.lower + local.kx);

IsBitSet local.fword local.bitPos:
end ((local.fword & (waitthread game.System.Maths.Pow2 local.bitPos)) != 0);

SetBit local.fword local.bitPos:
end (local.fword | (waitthread game.System.Maths.Pow2 local.bitPos));

ClearBit local.fword local.bitPos:
end (local.fword & ~(waitthread game.System.Maths.Pow2 local.bitPos));

ToggleBit local.fword local.bitPos:
end (local.fword ^ (waitthread game.System.Maths.Pow2 local.bitPos));

IsMaskSet local.fword local.mask:
end ((local.fword & local.mask) != 0);

SetMask local.fword local.mask:
end (local.fword | local.mask);

ClearMask local.fword local.mask:
end (local.fword & ~local.mask);

ToggleMask local.fword local.mask:
end (local.fword ^ local.mask);

/**
 bool AreTypesCompatible(<type> var1, <type> var2)
 =================================================================
 OVERVIEW|: Determines whether the type of the specified variables
			are compatible with each other. 
 OUTPUT	 |: <bool>;
 NOTE 	 |: For instance, an integer is compatible with a float,
			a char with a string, an array with a constant array...
*/
AreTypesCompatible local.var1 local.var2:
	local.type1 = typeof(local.var1);
	local.type2 = typeof(local.var2);
	
	if (local.type1 == local.type2 && local.type1 != game.System.VarType.NOTHING) {
		end 1;
	}
	
	local.isCompatible["char"]["string"] = 1;
	local.isCompatible["char"]["const string"] = 1;
	local.isCompatible["string"]["char"] = 1;
	local.isCompatible["string"]["const string"] = 1;
	local.isCompatible["const string"]["char"] = 1;
	local.isCompatible["const string"]["string"] = 1;
	local.isCompatible["array"]["const array"] = 1;
	local.isCompatible["const array"]["array"] = 1;
	local.isCompatible["int"]["float"] = 1;
	local.isCompatible["float"]["int"] = 1;
	
	if (local.isCompatible[local.type1][local.type2]) {
		end 1;
	}
end 0;

/**
 void CastToVoid()
 =================================================================
 OVERVIEW|: Returns nothing, or rather 'NIL'.
 OUTPUT	 |: NIL;
*/
CastToVoid:
end NIL;

/**
 entity CastToEntity(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to listener/entity type.
 OUTPUT	 |: <entity>; or NULL upon casting failure
*/
CastToEntity local.var:
	switch (typeof(local.var)) {
		case "int":
			if (0 <= local.var && local.var < 1024) {
				local.var = getentity(local.var);
			}
		break;
		case "string":
		case "const string":
			// '$'-operator will try to 'cast' a string to an entity by matching targetname,
			// if none such is found, the NULL entity is returned.
			local.var = $(local.var);
		break;
		default:
		break;
	}
	
	if (typeof(local.var) != "listener") {
		conprintf("^~^~^ Script Error: Cannot cast '" + typeof(local.var) + "' to listener\n");
		local.var = NULL;
	}
end local.var;

/**
 int CastToBool(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to (implicit) boolean type.
 OUTPUT	 |: <int>
*/
CastToBool local.var:
	switch (typeof(local.var)) {
		case "array":
		case "const array":
			if (local.var.size <= 0) {
				local.var = game.false;
			} else {
				local.var = game.true;
			}
		break;
		default:
			// Converts NIL, NULL, NaN, 0, 0.0, "" to boolean false (being integer 0) 
			// and everything else to true (being integer 1)
			local.var = !(!(local.var));
		break;
	}
end local.var;

/**
 int CastToInt(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to integer type.
 OUTPUT	 |: <int>; or NIL upon casting failure
*/
CastToInt local.var:
	switch (typeof(local.var)) {
		case "string":
		case "const string":
		case "float":
			local.var = int(local.var);
		break;
		case "char":
			local.var = charToInt(local.var);
		break;
		case "vector":
			local.var = int(vector_length(local.var));
		break;
		case "listener":
			if (local.var != NULL && local.var.entnum) {
				local.var = local.var.entnum;
			} else {
				local.var = -1; // simple entities have no entity number
			}
		break;
		case "NIL":
			local.var = 0;
		break;
		default:
			//"array", "const array" types remaining
		break;
	}
	if ((typeof local.var)[0] != "i") {
		conprintf("^~^~^ Script Error: Cannot cast '" + typeof(local.var) + "' to int\n");
		local.var = NIL;
	}
end local.var;

/**
 float CastToFloat(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to floating point type.
 OUTPUT	 |: <float>; or NIL upon casting failure
*/
CastToFloat local.var:
	switch (typeof(local.var)) {
		case "float":
		break;
		case "string":
		case "const string":
		case "int":
			local.var = float(local.var);
		break;
		case "char":
			local.var = float(string(local.var));
		break;
		case "vector":
			local.var = vector_length(local.var);
		break;
		case "NIL":
			local.var = 0.0;
		break;
		default:
			//"array", "const array" & "listener" types remaining
		break;
	}
	if ((typeof local.var)[0] != "f") {
		conprintf("^~^~^ Script Error: Cannot cast '" + typeof(local.var) + "' to float\n");
		local.var = NIL;
	}
end local.var;

/**
 vector CastToVector(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to vector type.
 OUTPUT	 |: <vector>; or NIL upon casting failure
*/
CastToVector local.var:
	switch (typeof(local.var)) {
		case "int":
		case "float":
			local.var = ( local.var local.var local.var );
		break;
		case "string":
		case "const string":
			if (local.var[0] == "(" && local.var[(local.var.size - 1)] == ")") {
				local.pt = 0;
				local.str[local.pt] = "";
				local.strSize = (local.var.size - 1);
				for (local.i = 1; local.i < local.strSize; local.i++) {
					if (charToInt(local.var[local.i]) == 44) {
						local.pt++;
						local.str[local.pt] = "";
						
						// Skips following space char
						if (charToInt(local.var[(local.i + 1)]) == 32) {
							local.i++; 
						}
						continue;
					}
					local.str[local.pt] += local.var[local.i];
				}

				if (local.str.size == 3) {
					local.var = ( (float(local.str[0])) (float(local.str[1])) (float(local.str[2])) );
				}
			}
		break;
		case "const array":
			if (local.var.size == 3) {
				if (typeof(local.var[1]) != "const array") {
					local.var = ( local.var[1] local.var[2] local.var[3] );
				} else {
					local.var = ( local.var[1][1] local.var[2][1] local.var[3][1] );
				}
			}
		break;
		case "array":
			if (local.var.size == 3) {
				if (local.var[0].size > 0) {
					local.var = ( local.var[0] local.var[1] local.var[2] );
				} else {
					local.var = ( local.var[1] local.var[2] local.var[3] );
				}
			}
		break;
		case "vector":
		break;
		default:
			// "listener" and "NIL" types remaining
		break;
	}	
	
	if ((typeof local.var) != "vector") {
		conprintf("^~^~^ Script Error: Cannot cast '" + (typeof local.var) + "' to vector\n");
		local.var = NIL;
	}
end local.var;

/**
 array CastToArray(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to array type.
 OUTPUT	 |: <array> or NIL upon casting failure
*/
CastToArray local.var:
	switch (typeof(local.var)) {
		case "vector":
			local.temp[1] = local.var[0];
			local.temp[2] = local.var[1];
			local.temp[3] = local.var[2];
			local.var = local.temp;
		break;
		case "const array":
			local.arraySize = local.var.size;
			for (local.i = 1; local.i <= local.arraySize; local.i++) {
				local.temp[local.i] = local.var[local.i];
			}
			local.var = local.temp;
		break;
		case "string":
		case "const string":
			local.arraySize = local.var.size;
			for (local.i = 0; local.i < local.arraySize; local.i++) {
				local.temp[(local.i + 1)] = local.var[local.i];
			}
			local.var = local.temp;
		break;
		case "array":
		break
		default:
			local.temp = local.var;
			local.var = NIL;
			local.var[1] = local.temp;
		break;
	}
end local.var;

/**
 char CastToChar(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to character type.
 OUTPUT	 |: <char>; or NIL upon casting failure
*/
CastToChar local.var:
	switch (typeof(local.var)) {
		case "int":
			if (0 < local.var && local.var < 256) {
				local.var = (waitthread GetIntToASCIIMasks)[local.var][0];
			}
		break;
		case "char":
		break;
		case "string":
		case "const string":
			local.var = local.var[0];
		break;
		default:
		break;
	}
	if (typeof(local.var) != "char") {
		conprintf("^~^~^ Script Error: Cannot cast '" + typeof(local.var) + "' to char\n");
		local.var = NIL;
	}
end local.var;

/**
 string CastToString(<type> var)
 =================================================================
 OVERVIEW|: Casts specified variable to character type.
 OUTPUT	 |: <string>; or NIL upon casting failure
*/
CastToString local.var:
	switch (typeof(local.var)) {
		case "vector":
		case "int":
		case "char":
		case "NIL":
			local.var = string(local.var);
		break;
		case "listener":
			if (local.var == NULL) {
				local.var = string(NULL);
			} else if (local.var.targetname) {
				local.var = local.var.targetname;
			} else {
				local.var = local.var.classname;
			}
		break;
		case "float":
			if !(waitthread game.System.Maths.path::__IsNaN local.var) {
				// Cast float to vector and cast vector to string, which represents 
				// its values with six decimals instead of three.
				local.tmpStr = string(( local.var 0.0 0.0 ));
				
				// Start for() loop at index 1 so we automatically skip the left bracket.
				local.var = "";
				for (local.i = 1; local.tmpStr[local.i] != ","; local.i++) {
					// Keep adding chars until a comma breaks the loop.
					local.var += local.tmpStr[local.i];
				}
			} else {
				local.var = "NaN";
			}
		break;
		case "const string":
			// Converts 'constant string' type to 'string' type.
			local.var = "" + local.var;
		break;
		default:
			//"array" & "const array" types remaining
		break;
	}
	if (typeof(local.var) != "string") {
		conprintf("^~^~^ Script Error: Cannot cast '" + typeof(local.var) + "' to string\n");
		local.var = NIL;
	}
end local.var;