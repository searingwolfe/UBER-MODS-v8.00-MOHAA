//*** --------------------------------------------
//*** "Bomber Plane Airstrikes"
//*** --------------------------------------------

main local.path local.team local.planes local.offtime local.bombs local.bombswait local.end local.noprint local.bulletstokill local.playerowner:

	if(level.water_volumes != NIL && level.water_volumes.size >= 1)
	{
		for(local.v = 1; local.v <= level.water_volumes.size; local.v++)
		{
			if(level.water_volumes[local.v][1][2] == NIL) { println("----- ERROR bomberplane.scr: level.water_volumes[" + local.v + "] has an invalid origin parameter!"); local.e = 1 }
			if(level.water_volumes[local.v][2][2] == NIL) { println("----- ERROR bomberplane.scr: level.water_volumes[" + local.v + "] has an invalid setsize1 parameter!"); local.e = 1 }
			if(level.water_volumes[local.v][2][0] > 0 || level.water_volumes[local.v][2][1] > 0 || level.water_volumes[local.v][2][2] > 0) { println("----- ERROR bomberplane.scr: level.water_volumes[" + local.v + "] has a setsize1 value > 0!"); local.e = 1 }
			if(level.water_volumes[local.v][3][2] == NIL) { println("----- ERROR bomberplane.scr: level.water_volumes[" + local.v + "] has an invalid setsize2 parameter!"); local.e = 1 }
			if(level.water_volumes[local.v][3][0] < 0 || level.water_volumes[local.v][3][1] < 0 || level.water_volumes[local.v][3][2] < 0) { println("----- ERROR bomberplane.scr: level.water_volumes[" + local.v + "] has a setsize2 value < 0!"); local.e = 1 }
		}
	}
	if(local.e == 1) { end }

	if(local.path == NIL) { wait 1; println("----- ERROR bomberplane.scr: parameters are missing!"); end }
	if($(local.path) == NULL) { wait 1; println("----- ERROR bomberplane.scr: $" + local.path + " does not exist!"); end }
	if(int(local.planes) < 0) { local.planes = local.planes * -1 }
	if(int(local.planes) == 0 || string(local.planes) == "0") { wait 1; println("----- ERROR bomberplane.scr: 'planes' parameter must be an integer > 0."); end }
	if(int(local.offtime) < 0) { local.offtime = local.offtime * -1 }
	if(int(local.offtime) == 0 || string(local.offtime) == "0") { wait 1; println("----- ERROR bomberplane.scr: 'off time' parameter must be a number >= 1."); end }
	if(local.team != "allies" && local.team != "axis" && local.team != "c47") { local.team = "axis" }
	if(local.bombs != NIL && string(local.bombs) != "0")
	{
		if(int(local.bombs) < 0) { local.bombs = local.bombs * -1 }
		if(int(local.bombs) == 0) { wait 1; println("----- ERROR bomberplane.scr: 'bombs' parameter must be an integer > 0."); end }
		if(int(local.bombswait) < 0) { local.bombswait = local.bombswait * -1 }
		if((int(local.bombswait) == 0 && local.bombswait.size > 1) || string(local.bombswait) == "0") { wait 1; println("----- ERROR bomberplane.scr: 'bombs wait' parameter must be a number > 0."); end }
		local.bombs = int(local.bombs)
	}
	else { local.bombsoff = 1 }
	local.planes = int(local.planes)
	if(level.scriptmaster_bomberplane != 1) { thread cache_plane_explodestuff }

	if(level.bomberplane_health == NIL || level.bomberplane_health <= 0) { level.bomberplane_health = 200 }
	if(level.bomberplane_bombspeed == NIL || level.bomberplane_bombspeed <= 0) { level.bomberplane_bombspeed = 0.25 }
	if(level.bomberplane_bombgravity == NIL || level.bomberplane_bombgravity <= 0) { level.bomberplane_bombgravity = 2 }

	if(local.playerowner != NIL && local.playerowner != NULL) { local.owner_exists = 1 }

	while($auto_bomberplane != NULL || $airstrike_bomberplane != NULL) { waitframe } // wait until airspace is not busy anymore
	wait (local.offtime - 2) // offtime can also be between 1 and 2. any offtime between 1 and 2 is essentially waiting 0 seconds.

	if(local.owner_exists == 1 && (local.playerowner == NIL || local.playerowner == NULL || local.playerowner.dmteam != local.team)) { end }
	if(local.bombsoff != 1 && local.noprint != 1) 
	{ 
		if(local.team == "allies") { iprintlnbold "*** Allies Airstrike Carpet Bomb Incoming! Take Cover! ***"; println("----- Allies Airstrike Carpet Bomb Incoming!") }
		if(local.team == "axis") { iprintlnbold "*** Axis Airstrike Carpet Bomb Incoming! Take Cover! ***"; println("----- Axis Airstrike Carpet Bomb Incoming!") }
	}
	wait 2
	if(local.owner_exists == 1 && (local.playerowner == NIL || local.playerowner == NULL || local.playerowner.dmteam != local.team)) { end }

	for(local.p = 2; local.p <= local.planes; local.p++) { thread main local.path local.team 1 (local.p - 1) local.bombs local.bombswait 1 1 local.bulletstokill local.playerowner }

	local.plane = spawn script_model targetname "airstrike_bomberplane"
	if(local.team == "allies") { local.plane model "vehicles/p47fly.tik" }
	if(local.team == "axis") { local.plane model "vehicles/fockwulffly.tik" }
	if(local.team == "c47") { local.plane model "vehicles/c47fly.tik" }
	local.plane.origin = $(local.path).origin
	local.plane.angles = $(local.path).angles
	local.plane.scale = 1
	local.plane notsolid
	local.plane show
	local.plane.team = local.team

	local.plane followpath $(local.path)
	local.plane playsound airplane_flyover
	local.plane loopsound airplane_idle

	local.plane thread damagetrigger local.bulletstokill local.playerowner
	if(local.bombsoff != 1) { local.plane thread dropbombs local.bombs local.bombswait local.offtime local.noprint local.playerowner }
	if(local.playerowner != NIL && local.playerowner != NULL) { local.plane thread delete_airstrike local.playerowner local.playerowner.dmteam }

	local.plane waitmove
	if(local.plane != NULL) { local.plane remove }

	if(local.end != 1) { thread main local.path local.team local.planes local.offtime local.bombs local.bombswait local.end local.noprint local.bulletstokill local.playerowner }
end

damagetrigger local.bulletstokill local.playerowner:

	local.trigger = spawn trigger_multiple spawnflags 128 targetname "airstrike_bomberplanetrig" // only responds to bullets and explosions occuring near them
	local.trigger.origin = self.origin
	if(self.model == "models/vehicles/c47fly.tik") { local.trigger setsize ( -600 -600 -100 ) ( 600 600 100 ) }
	else { local.trigger setsize ( -300 -300 -100 ) ( 300 300 100 ) }

	if(local.bulletstokill == NIL) { local.trigger.health = level.bomberplane_health }
	else { local.trigger.health = 10000 * local.bulletstokill }
	local.trigger glue self
	local.trigger.player_owner = local.playerowner
	self.damage_trigger = local.trigger
	
	while(self != NULL && local.trigger.health > 0) 
	{
		for(local.p = 1; local.p <= $player.size; local.p++)
		{
			if($player[local.p] istouching self) { $player[local.p] volumedamage 999 } // kill any player that touches the plane

			if($("bigbombweap" + (local.p - 1)) != NULL && $("bigbombweap" + (local.p - 1)) istouching self) { self thread plane_explode_null; local.trigger remove; end }
			if($("lightbombweap" + (local.p - 1)) != NULL && $("lightbombweap" + (local.p - 1)) istouching self) { self thread plane_explode_null; local.trigger remove; end }
		}
		waitframe
	}

	if(self != NULL && local.trigger.health <= 1) { self thread plane_crashing_null }
	local.trigger remove 
end

////////////////////////////////////////////////////////////////////////

dropbombs local.bombs local.bombswait local.offtime local.noprint local.playerowner:

	wait local.bombswait
	if(local.noprint == 1)
	{
		for(local.t = 1; local.t <= local.offtime; local.t++) { wait .1 } // ensures that every 2 planes' bombs drop in different locations
	}

	local.b = 0
	while(self != NULL && self.damage_trigger != NULL && self.damage_trigger.health > 0 && local.b <= local.bombs)
	{
		self thread bomb local.playerowner
		local.b++
		wait .2
	}
end

bomb local.playerowner:

	local.bomb = spawn script_model targetname ("airstrike_bombdrop_" + self.entnum)
	local.bomb model "ammo/us_bomb.tik" 
	local.bomb.origin = self.origin - ( 0 0 50 )
	local.bomb.angles = ( self.angles + ( 0 90 0 ) )
	local.bomb.scale = 1.5
	local.bomb thread bombtwist
	local.bomb playsound leadinmp2
	local.bomb notsolid
	local.bomb physics_on

	local.bomb gravity level.bomberplane_bombgravity
	local.bomb.velocity = ( (self.velocity[0] * level.bomberplane_bombspeed) (self.velocity[1] * level.bomberplane_bombspeed) (self.velocity[2] * level.bomberplane_bombspeed) )

	local.bomb thread waittill_touch local local.playerowner
	local.hitthing = self
	while(local.hitthing == self)
	{
		local.bomb waittill touch
		local.hitthing = parm.other
	}
	local.bomb.velocity = ( 0 0 0 )

	if(local.bomb.hitwater != 1) { thread bomb_explode local.bomb local.playerowner }
end

bomb_explode local.bomb local.playerowner:
	
	local.origin = local.bomb.origin
	//local.bomb explode // this creates its own radiusdamage

	local.boom = spawn script_model targetname "mortar_dirt_nosound"
	if(local.bomb.hitwater == 1) { local.boom model animate/fx_mortar_water.tik }
	else { local.boom model emitters/mortar_dirt_nosound.tik } // emitters/fx_explosion_mine.tik
	local.boom.origin = local.origin
	local.boom.scale = 1.5 // = 1 if using fx_explosion_mine.tik
	local.boom anim start
	local.boom light 1 0 0 500

	//radiusdamage local.boom.origin 300 600
	local.blewup = 1
	for(local.i = 1; local.i <= $player.size; local.i++)
	{
		if(vector_length(local.boom.origin - $player[local.i].origin) <= 600) // "cansee" condition removed; if somehow a teammate cannot see a bomb, they will still get killed by radiusdamage
		{
			if(local.playerowner == NIL || local.playerowner == NULL)
			{
				if($player[local.i].driving != 1 && $player[local.i].flying != 1)
				{
					$player[local.i] damage $world 300 $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0
				}
				else if($player[local.i].drivingent != NIL && $player[local.i].drivingent != NULL)
				{
					if($player[local.i].flying == 1) { $("planehit" + $player[local.i].entnum) damage $world 300 $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
					else { $player[local.i].drivingent damage $world 300 $world (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
				}
			}
			else if($player[local.i] != local.playerowner && $player[local.i].dmteam == local.playerowner.dmteam && getcvar("g_teamdamage") != "1" && getcvar("g_gametype") != "1") { local.blewup = 0 }
			else
			{
				if($player[local.i].driving != 1 && $player[local.i].flying != 1)
				{
					$player[local.i] damage local.playerowner 300 local.playerowner (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 // "damage" does not hurt teammates, but scriptbazookaexplosion.tik does
				}
				else if($player[local.i].drivingent != NIL && $player[local.i].drivingent != NULL)
				{
					$player[local.i].drivingent.shooter = local.playerowner
					if($player[local.i].flying == 1) { $("planehit" + $player[local.i].entnum) damage local.playerowner 300 local.playerowner (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
					else { $player[local.i].drivingent damage local.playerowner 300 local.playerowner (0 0 0) (0 0 0) (0 0 0) 0 9 9 0 }
				}
			}
		}
	}

	if(self != NULL && vector_length(local.boom.origin - self.origin) <= 600) { self nodamage; local.nodamage = 1 }
	if(local.bomb.hitwater == 1) { local.boom playsound artyexp_water }
	else { local.boom playsound artyexp_sand }

	waitframe
	if(local.blewup == 1 && local.nodamage != 1) { radiusdamage local.boom.origin 300 600 }
	local.boom remove
	if(local.bomb != NULL) { local.bomb remove }
	if(self != NULL && local.nodamage == 1) { self takedamage }
end

bombtwist:

	for(local.i=0;local.i<=90 ;local.i+=3)
	{

		waitframe
		if(self == NIL || self == NULL)
		{
			end
		}
		else
		{
			self.angles = (  self.angles[0] self.angles[1] local.i )
		}
	}
end

////////////////////////////////////////////////////////////////////////

waittill_touch local.thread local.playerowner:

	while(1)
	{
		if(self == NULL || vector_length(self.origin) > 12000) // if moving outside the map or NULL.
		{
			if(local.thread != NULL) { local.thread remove }
			if(self != NULL) { self remove }
			end
		}

		if(self.velocity == ( 0 0 0 )) { end }

		if(self.hitwater != 1 && level.water_volumes != NIL && level.water_volumes != 0)
		{
			for(local.v = 1; local.v <= level.water_volumes.size; local.v++)
			{
				local.X_min[local.v] = level.water_volumes[local.v][1][0] + level.water_volumes[local.v][2][0]
				local.X_max[local.v] = level.water_volumes[local.v][1][0] + level.water_volumes[local.v][3][0]
				local.Y_min[local.v] = level.water_volumes[local.v][1][1] + level.water_volumes[local.v][2][1]
				local.Y_max[local.v] = level.water_volumes[local.v][1][1] + level.water_volumes[local.v][3][1]
				local.Z_min[local.v] = level.water_volumes[local.v][1][2] + level.water_volumes[local.v][2][2]
				local.Z_max[local.v] = level.water_volumes[local.v][1][2] + level.water_volumes[local.v][3][2] + 10 // moving very fast may explode slightly above the actual water.
				local.origin = self.origin
	
				if(int(local.origin[0]) >= local.X_min[local.v] && int(local.origin[0]) <= local.X_max[local.v] && int(local.origin[1]) >= local.Y_min[local.v] && int(local.origin[1]) <= local.Y_max[local.v] && int(local.origin[2]) >= local.Z_min[local.v] && int(local.origin[2]) <= local.Z_max[local.v])
				{
					self.hitwater = 1
					self.velocity = ( 0 0 0 )
					if(local.thread != NULL) { local.thread remove }

					if(self.model == "models/ammo/us_bomb.tik") { thread bomb_explode self local.playerowner }
					else { self thread plane_explode_null }
					end
				}
			}
		}
		waitframe
	}
end

////////////////////////////////////////////////////////////////////////

plane_crashing_null: // almost identical threads from server_planes/plane_crash.scr

	self stoploopsound
	self notsolid
	self hide

	local.deadplane = spawn script_model
	local.deadplane model self.model
	local.deadplane.origin = self.origin + ( 0 0 -50 )
	local.deadplane.angles = self.angles
	local.deadplane.scale = self.scale
	local.deadplane loopsound airplane_idle
	local.deadplane physics_on			// need physics for "waittill touch" and gravity to work
	local.deadplane.velocity = self.velocity	// always set the velocity after turning physics on.

	local.deadplane thread plane_crash_null

	local.flyingexplosion = spawn "models/emitters/fireandsmoke.tik"			
	local.flyingexplosion glue local.deadplane
	local.flyingexplosion.origin = local.deadplane.origin
	if(local.deadplane.model == "models/vehicles/c47fly.tik") { local.flyingexplosion.scale = local.deadplane.scale * 2 }
	else { local.flyingexplosion.scale = local.deadplane.scale }
	local.flyingexplosion anim start
	local.flyingexplosion notsolid

	local.flyingsmoke = spawn "models/emitters/plane_smoke.tik"			
	local.flyingsmoke glue local.deadplane
	local.flyingsmoke.origin = local.deadplane.origin
	if(local.deadplane.model == "models/vehicles/c47fly.tik") { local.flyingsmoke.scale = local.deadplane.scale * 2 }
	else { local.flyingsmoke.scale = local.deadplane.scale }
	local.flyingsmoke anim start
	local.flyingsmoke notsolid

	local.now = local.deadplane.angles[0]
	local.end = local.now + 40

	for(local.i=0;local.i<=45 ;local.i+=1)
	{
		waitframe
		if(local.deadplane==NULL)
		{
			break
		}
		else
		{
			local.deadplane.angles = ( local.i local.deadplane.angles[1] local.deadplane.angles[2] )
		}
	}

	while(local.deadplane)
	{
		waitframe
	}

	local.flyingsmoke remove
	local.flyingexplosion remove
end	

plane_crash_null:

	self thread waittill_touch local
	self waittill touch
	if(self.hitwater != 1) { self thread plane_explode_null }
end

plane_explode_null:

	local.origin = self.origin
	local.scale = self.scale
	local.model = self.model
	local.hitwater = self.hitwater
	self explode
	self remove

	if(local.model == "models/vehicles/c47fly.tik") { local.radius = 1000 * local.scale }
	else { local.radius = 550 * local.scale }

	if(local.model == "models/vehicles/c47fly.tik") { local.expscale = 3.00 * local.scale }
	else { local.expscale = 1.50 * local.scale }
	if(local.expscale < .6) { local.expscale = .6 }

	local.Exp = spawn "emitters/mortar_higgins.tik"
	local.Exp.origin = local.origin
	local.Exp.angles = ( 0 -90 0 ) + ( 260 0 0 )
	local.Exp light 1 0 1 local.radius
	local.Exp anim start
	local.Exp.scale = local.expscale

	if(local.hitwater == 1)
	{
		local.Exp2 = spawn "animate/fx_mortar_water.tik"
		local.Exp2.origin = local.origin
		local.Exp2 anim start
		local.Exp2.scale = local.expscale * 1.20
		local.Exp playsound artyexp_water
	}
	else
	{
		local.Exp2 = spawn "emitters/mortar_dirt_nosound.tik" targetname "mortar_dirt_nosound"
		local.Exp2.origin = local.origin
		local.Exp2 anim start
		local.Exp2.scale = local.expscale
		local.Exp playsound artyexp_sand
	}

	exec global/earthquake.scr .35 2 0 0
	radiusdamage local.origin 500 local.radius
	local.Exp2 playsound explodeplane

	local.Exp anim start
	local.Exp2 anim start
	wait .1
	local.Exp remove	
	local.Exp2 remove
end

////////////////////////////////////////////////////////////////////////

delete_airstrike local.player local.team:

	while(self != NULL && local.player != NULL && local.player.dmteam == local.team && local.player.dmteam != "spectator") { waitframe }
	if(self == NULL) { end }

	$("airstrike_bombdrop_" + self.entnum) remove
	self remove
end

////////////////////////////////////////////////////////////////////////

cache_plane_explodestuff:

	if(level.scriptmaster_flyableplanes == 1) { end }

	exec global/aliascache_triggersounds.scr airstrikes
	exec global/aliascache_triggersounds.scr arty_exp_sand

	local.master = spawn scriptmaster
	local.master aliascache explodeplane1 sound/weapons/explo/Explo_MetalMed1.wav soundparms 1.2 .2 .8 .2 1500 8000 weapon loaded maps level.mapname
	local.master aliascache explodeplane2 sound/weapons/explo/Explo_MetalMed2.wav soundparms 1.2 .2 .8 .2 1500 8000 weapon loaded maps level.mapname
	local.master aliascache explodeplane3 sound/weapons/explo/Explo_MetalMed3.wav soundparms 1.2 .2 .8 .2 1500 8000 weapon loaded maps level.mapname
	local.master aliascache explodeplane4 sound/weapons/explo/Explo_MetalMed4.wav soundparms 1.2 .2 .8 .2 1500 8000 weapon loaded maps level.mapname
	local.master aliascache explodeplane5 sound/weapons/explo/Explo_MetalMed5.wav soundparms 1.2 .2 .8 .2 1500 8000 weapon loaded maps level.mapname
	local.master aliascache leadinmp2 sound/weapons/explo/Exp_LeadIn_07.wav soundparms .8 .2 .7 .5 160 3000 auto loaded maps level.mapname

	if(level.scriptmaster[arty_exp_sand] != 1)
	{
		local.master aliascache artyexp_sand1 sound/weapons/explo/exp_dirt_01.wav soundparms .8 .3 .7 .4 1000 8000 weapon loaded maps level.mapname
		local.master aliascache artyexp_sand2 sound/weapons/explo/exp_dirt_02.wav soundparms .8 .3 .7 .4 1000 8000 weapon loaded maps level.mapname
		local.master aliascache artyexp_sand3 sound/weapons/explo/exp_dirt_03.wav soundparms .8 .3 .7 .4 1000 8000 weapon loaded maps level.mapname
		local.master aliascache artyexp_sand4 sound/weapons/explo/exp_dirt_04.wav soundparms .8 .3 .7 .4 1000 8000 weapon loaded maps level.mapname
	}
	if(level.scriptmaster[arty_exp_water] != 1)
	{
		local.master aliascache artyexp_water1 sound/weapons/explo/exp_water_01.wav soundparms 1.0 0.2 0.8 0.4 1000 8000 weapon loaded maps level.mapname	
		local.master aliascache artyexp_water2 sound/weapons/explo/exp_water_02.wav soundparms 1.0 0.2 0.8 0.4 1000 8000 weapon loaded maps level.mapname
		local.master aliascache artyexp_water3 sound/weapons/explo/exp_water_03.wav soundparms 1.0 0.2 0.8 0.4 1000 8000 weapon loaded maps level.mapname
	}

	cache models/ammo/us_bomb.tik
	cache models/emitters/fireandsmoke.tik
	cache models/emitters/plane_smoke.tik
	cache models/emitters/mortar_dirt_nosound.tik
	cache models/emitters/mortar_higgins.tik
	cache models/vehicles/c47fly.tik
	cache models/vehicles/p47fly.tik
	cache models/vehicles/fockwulffly.tik

	level.scriptmaster_bomberplane = 1
end
