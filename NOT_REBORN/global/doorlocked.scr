// Simple script for adding simulated $door_locked triggers, but without spawning any entities.
//
// Parameters: trigger origin (standing on ground in front of a door), door type (wood, metal, gateiron, gatelarge, gatemetal, garagedoor), ...
// ... extra sounds (0 = no, 1 = yes for "wood", "metal", "gatelarge" only), set number (doorlocked gets removed if an exploder with the #set explodes).
// Example: exec global/doorlocked.scr ( 234 -2453 129 ) wood
// Example: exec global/doorlocked.scr ( 234 -2453 129 ) gatelarge 1

main local.trigorigin local.type local.extra local.set:

	if(local.trigorigin == NIL || (local.trigorigin != NIL && local.trigorigin[2] == NIL)) { wait 1; println("----- ERROR doorlocked.scr: 'origin' parameter is missing!"); end }
	if(local.type == NIL) { wait 1; println("----- ERROR doorlocked.scr: 'door type' parameter is missing!"); end }
	else if(local.type != "wood" && local.type != "metal" && local.type != "gateiron" && local.type != "gatelarge" && local.type != "gatemetal" && local.type != "garagedoor") { wait 1; println("----- ERROR doorlocked.scr: 'door type' parameter must be 'wood', 'metal', 'gatelarge', 'gatemetal', or 'garagedoor'."); end }

	level waittill spawn // need this for script to find any "local.explodertrig" with the #set "local.set", if it exists.

	local.setsize1 = ( -85 -85 -30 )	// generic door trigger setsizes (keep them large enough for players to stand inside trigger's volume, do not use exact door dimensions).
	local.setsize2 = ( 85 85 125 )

	if(level.doorlocked_scriptmaster[local.type] != 1) { thread doorlocked_scriptmaster local.type local.extra }
	local.c = 0

	if(local.set != NIL)
	{
		for(local.e = 1; local.e <= $exploder_trigshot.size; local.e++) // remove the doorlocked if an exploder with the #set explodes.
		{
			if($exploder_trigshot[local.e].set == local.set) { local.explodertrig = $exploder_trigshot[local.e]; break }
		}
	}

	while(local.set == NIL || local.explodertrig == NIL || local.explodertrig == NULL || (local.explodertrig != NIL && local.explodertrig != NULL && local.explodertrig.dead != 1))
	{
		for(local.i = 1; local.i <= $player.size; local.i++)
		{
			local.X_min = local.trigorigin[0] + local.setsize1[0]
			local.X_max = local.trigorigin[0] + local.setsize2[0]
			local.Y_min = local.trigorigin[1] + local.setsize1[1]
			local.Y_max = local.trigorigin[1] + local.setsize2[1]
			local.Z_min = local.trigorigin[2] + local.setsize1[2]
			local.Z_max = local.trigorigin[2] + local.setsize2[2]
			local.origin = $player[local.i].origin
	
			if(int(local.origin[0]) >= local.X_min && int(local.origin[0]) <= local.X_max && int(local.origin[1]) >= local.Y_min && int(local.origin[1]) <= local.Y_max && int(local.origin[2]) >= local.Z_min && int(local.origin[2]) <= local.Z_max)
			{
				if(isalive $player[local.i] && $player[local.i].dmteam != "spectator" && $player[local.i].dead != 1 && $player[local.i].useheld == 1 && local.c == 0 && $player[local.i].trigvolume_useheld != 1)
				{
					$player[local.i] thread doorsound local.type // "setthread" for the simulated trigger.

					local.c = 1
					$player[local.i].trigvolume_useheld = 1
				}
			}
			if($player[local.i].trigvolume_useheld == 1 && $player[local.i].useheld != 1) { $player[local.i].trigvolume_useheld = 0 } // make sure the player's useheld = 0 before triggering again.
		}
		if(local.c >= 1) { local.c++ }
		if(local.c > 20) { local.c = 0 } // keep the trigger "nottriggerable" for 1 second (20 = 1 second, 40 = 2 seconds, 60 = 3 seconds).
		waitframe
	}
end

////////////////////////////////////////////////////////////////////////

doorsound local.type:

	switch(local.type)
	{
		case "wood": self playsound doorwoodlocked; break
		case "metal": self playsound doormetallocked; break
		case "gateiron": self playsound gateironlocked; break
		case "gatelarge": self playsound gatelargelocked; break
		case "gatemetal": self playsound gatemetallocked; break
		case "garagedoor": self playsound garagedoorlocked; break
		default: break
	}
end

////////////////////////////////////////////////////////////////////////

doorlocked_scriptmaster local.type local.extra:

	level.mapname = getcvar "mapname"
	local.master = spawn scriptmaster
	switch(local.type)
	{
		case "wood":
			if(local.extra == 1) { local.master aliascache doorwoodlocked1 sound/mechanics/DoorWoodLocked_01.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname }
			local.master aliascache doorwoodlocked2 sound/mechanics/DoorWoodLocked_02.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname
			break

		case "metal":
			if(local.extra == 1) { local.master aliascache doormetallocked1 sound/mechanics/DoorMetalLocked_01.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname }
			local.master aliascache doormetallocked2 sound/mechanics/DoorMetalLocked_02.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname
			break

		case "gateiron":
			local.master aliascache gateironlocked1 sound/mechanics/gate_iron_locked.wav soundparms 1.3 0.2 0.9 0.2 160 1600 item loaded maps level.mapname
			break

		case "gatelarge":
			local.master aliascache gatelargelocked1 sound/mechanics/Wood_fence_locked.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname
			if(local.extra == 1) { local.master aliascache gatelargelocked2 sound/mechanics/gate_large_locked.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname }
			break

		case "gatemetal":
			local.master aliascache gatemetallocked sound/mechanics/Gate_Metal_Locked.wav soundparms 1.2 0.2 0.8 0.2 160 1600 item loaded maps level.mapname
			break

		case "garagedoor":
			local.master aliascache garagedoorlocked sound/mechanics/Gate_Metal_Locked.wav soundparms 1.3 0.0 0.8 0.2 160 1600 item loaded maps level.mapname
			break

		default:
			break
	}
	level.doorlocked_scriptmaster[local.type] = 1
end
