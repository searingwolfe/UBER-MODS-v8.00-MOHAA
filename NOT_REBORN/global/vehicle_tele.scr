// A vehicle tele allows vehicles to travel through walls/gates to a normally inaccessable area.
// Lasers can be spawned into a local.lasers array via the "spawnlaser" thread in this script (paramters: origin, endpoint, initial color, scale).
//
// The optional teleporting alignment parameter forces vehicles to move along the 0-180 degree axis or 90-270 degree axis, preventing them from falling out of the map when teleporting across long distances.
// A solid floor entity is required for teleporters across long distances through map walls, to keep the teleporting vehicles from blowing up or falling endlessly into the void.
//
// Parameters: origin, setsize 1, setsize 2, laser array (or NIL if no lasers), teleporting alignment (NIL = none, 0 = 0-180 axis, 1 = 90-270 axis), vehicle height after teleporting (default/NIL = 0), ...
// ... teleporting speed (default/NIL = 25, max = 300), spawn solid floor (0 or NIL = no, 1 = yes), ...
// ... height_1 after teleporting if facing 0 or 90 degrees (only if alignment = 0 or 1), height_2 after teleporting if facing 180 or 270 degrees (only if alignment = 0 or 1, ignores "height" parameter).
//
// Example: exec global/vehicle_tele.scr ( 4193 -1119 -511 ) ( -222 -680 -10 ) ( 222 680 355 ) local.lasers 1 0 50 1
//
//	local.lasers[1] = thread global/vehicle_tele.scr::spawnlaser ( -1507 -6227 -511 ) ( -1507 -6227 -262 ) ( 1 0 0 ) 3 // origin, endpoint, initial color, scale
//	local.lasers[2] = thread global/vehicle_tele.scr::spawnlaser ( -1507 -6224 -259 ) ( -1507 -6464 -259 ) ( 1 0 0 ) 3
//	local.lasers[3] = thread global/vehicle_tele.scr::spawnlaser ( -1507 -6461 -262 ) ( -1507 -6461 -511 ) ( 1 0 0 ) 3
//	exec global/vehicle_tele.scr ( -1502 -6344 -511 ) ( -30 -115 -10 ) ( 30 115 200 ) local.lasers 0

main local.origin local.setsize1 local.setsize2 local.lasers local.align local.height local.speed local.spawnfloor local.height_1 local.height_2:

	wait 1 // wait for everything in the map to spawn first

	if(level.drivable_entities == NIL || (level.drivable_entities != NIL && level.drivable_entities.size < 1)) { end }

	if(local.height == NIL) { local.height = 0 }
	if(local.speed == NIL || local.speed < 0) { local.speed = 25 } // increase this to speed up vehicles traveling through teleporter.
	else if(local.speed > 300) { local.speed = 300 }
	if(local.spawnfloor == 1) { thread solidclip local.origin local.setsize1 ( local.setsize2[0] local.setsize2[1] 0 ) }

	local.trigshot = spawn trigger_multiple spawnflags 128 targetname "vehicle_tele"
	local.trigshot.origin = local.origin
 	local.trigshot setsize local.setsize1 local.setsize2
	local.trigshot.color1 = ( 1 0 0 )
	local.trigshot.lasers = local.lasers
	local.trigshot setthread tele_shot

	local.PI = 3.14159265359
	while(local.trigshot != NULL)
	{
		local.trigshot.teleporting = 0
		for(local.a = 0; local.a <= level.drivable_entities.size; local.a++)
		{
			for(local.s = 1; $(level.drivable_entities[local.a]) != NULL && local.s <= $(level.drivable_entities[local.a]).size; local.s++)
			{
				if($(level.drivable_entities[local.a])[local.s] != NULL && $(level.drivable_entities[local.a])[local.s] istouching local.trigshot && $(level.drivable_entities[local.a])[local.s].driver != NIL)
				{
					local.trigshot.teleporting = 1
					local.degrees = $(level.drivable_entities[local.a])[local.s].angles[1] // don't subtract degrees by 360 if > 180, otherwise align if-statements may not work.
					local.radians = local.degrees * (local.PI / 180)

					if(local.align == 0)
					{
						if(local.radians >= 1.5 * local.PI || local.radians < 0.5 * local.PI) { local.radians = 0; local.degrees = 0 }
						if(local.radians >= 0.5 * local.PI && local.radians < 1.5 * local.PI) { local.radians = local.PI; local.degrees = 180 }

						if(local.degrees == 0 && local.height_1 != NIL) { local.height = local.height_1 }
						if(local.degrees == 180 && local.height_2 != NIL) { local.height = local.height_2 }
					}
					else if(local.align == 1)
					{
						if(local.radians >= 0 && local.radians < local.PI) { local.radians = 0.5 * local.PI; local.degrees = 90 }
						if(local.radians >= local.PI && local.radians < 2 * local.PI) { local.radians = 1.5 * local.PI; local.degrees = -90 }

						if(local.degrees == 90 && local.height_1 != NIL) { local.height = local.height_1 }
						if(local.degrees == -90 && local.height_2 != NIL) { local.height = local.height_2 }
					}

					local.sin = (waitthread global/math.scr::sine local.degrees) * 300 // 300 = maximum size of vehicles/tanks
					local.cos = (waitthread global/math.scr::cosine local.degrees) * 300
					local.fwd_vec = (angles_toforward ( 0 local.degrees 0 ))
					$(level.drivable_entities[local.a])[local.s].angle = local.degrees

					if(local.align != NIL)
					{
						local.X_min = local.origin[0] + local.setsize1[0]
						local.X_max = local.origin[0] + local.setsize2[0]
						local.Y_min = local.origin[1] + local.setsize1[1]
						local.Y_max = local.origin[1] + local.setsize2[1]
						local.x_median = (local.X_min + local.X_max) / 2
						local.y_median = (local.Y_min + local.Y_max) / 2

						if(local.align == 0) { $(level.drivable_entities[local.a])[local.s].origin = ( $(level.drivable_entities[local.a])[local.s].origin[0] local.y_median $(level.drivable_entities[local.a])[local.s].origin[2] ) }
						else if(local.align == 1) { $(level.drivable_entities[local.a])[local.s].origin = ( local.x_median $(level.drivable_entities[local.a])[local.s].origin[1] $(level.drivable_entities[local.a])[local.s].origin[2] ) }

					if(local.align != NIL) { $(level.drivable_entities[local.a])[local.s].origin = trace ($(level.drivable_entities[local.a])[local.s].origin + local.fwd_vec * local.speed) ($(level.drivable_entities[local.a])[local.s].origin + local.fwd_vec * (local.speed + 300) + ( 0 0 local.height )) 0 }
					}
					else { $(level.drivable_entities[local.a])[local.s].origin += ( local.cos local.sin local.height ) }

					local.trigshot thread lasers_telesuccess local.lasers ( 1 0 0 ) ( 0 1 0 )
					local.trigshot thread touchingent $(level.drivable_entities[local.a])[local.s] local.height
				}
			}
		}
		waitframe
	}
end

//-----------------------------------------------------------------------------

tele_shot:

	local.player = parm.other
	if(local.player.driving == 1) { end } // ensures that vehicles/tanks do not trigger the lasers to turn white, when they should be turning green.

	if(self.lasers_telesuccess == 1) { end }
	self nottriggerable
	if(self.lasers != NIL) { self.lasers color ( 1 1 1 ) }
	waitframe
	if(self.lasers != NIL) { self.lasers color self.color1 }
	self triggerable
end

lasers_telesuccess local.lasers local.color1 local.color2:

	if(self.lasers_telesuccess == 1) { end }
	self.lasers_telesuccess = 1

	if(local.lasers != NIL) { local.lasers color local.color2 }
	wait 0.5
	if(local.lasers != NIL) { local.lasers color local.color1 }
	self.lasers_telesuccess = 0
end

//-----------------------------------------------------------------------------

touchingent local.vehicle local.height:

	if(local.vehicle.touching_vehicletele == 1) { end }
	local.vehicle.touching_vehicletele = 1

	while(self != NULL && local.vehicle != NULL && local.vehicle istouching self) { waitframe }

	if(local.vehicle != NULL)
	{
		if(local.height < 0) { local.vehicle.origin -= ( 0 0 local.height ) } // increase height again after exiting tele if height is negative, to prevent vehicles from getting stuck in the ground.
		local.vehicle.touching_vehicletele = 0
	}
end

//-----------------------------------------------------------------------------

spawnlaser local.origin local.endpoint local.color local.scale:

	local.laser = spawn func_beam
	local.laser minoffset 0.0
	local.laser maxoffset 0.0
	local.laser numsegments 1
	local.laser life 0
	local.laser color local.color
	local.laser alpha 0.4
	local.laser alwaysdraw
	local.laser activate	
	if(local.scale == NIL || local.scale <= 0) { local.laser scale 1 }	
	else { local.laser scale local.scale }
	local.laser notsolid
	local.laser.origin = local.origin
	local.laser endpoint local.endpoint
end local.laser

solidclip local.origin local.setsize1 local.setsize2:

	local.clip = spawn script_object
	local.clip.origin = local.origin
	local.clip setsize local.setsize1 local.setsize2
	local.clip.angle = 0
	local.clip solid
	local.clip nodamage
end