// Player-Controlled Spotlight. Press USE to turn on/off the spotlight.
//
// The original player-spotlight script is modded to allow all 4 mounted orientations, instead of just the ground/floor.
// Try both orients (0 or 1) if using mountwall = 1 or 3 to get the best rotation, you'll know that "orient" needs to be changed if the spotlight doesn't rotate correctly with the player's angles.
//
// When another player touches the spotlight's beam, that player is illuminated with a big light, whose color is identical to the spotlight beam's color (run by "led_spotlight.scr").
//
// The color of the spotlight's beam can also be changed with an alarm switch or similar switch (see spotlight_colorswitch.scr),
// thanks to two if-statements inside a while(1) loop that wait until level.spotlight[local.name] = 1 for a one-time random color change, or until level.spotlight_rainbow[local.name] = 1
// for randomly, rapidly, continuously changing colors.
//
// global/player_spotlight.scr & map_triggers/player_spotlight.scr can work together by switching back and forth between these two scripts, only if $pathnames are added (without the "$").
// The global spotlights continuously follow a looping path of SplinePath nodes until a player is within level.autospot_trigdist distance from the spotlight's target light,
// then following the spotted player until he runs out of the spotlight's view.
//
// Any players that stand near the auto-spotlight will convert it into the regular map_triggers spotlights, allowing the player to aim and turn on/off the spotlight.
// After the player moves away and after a few seconds, the map_triggers spotlights revert back to the global auto-spotlights (also turning back on), following the path again where it last left off.
// Add one of these 2 level variables to adjust the lock-on trigger's distance, or the speed that the auto-spotlight moves across its path.
// 	level.autospot_trigdist = 550
// 	level.autospot_movespeed = 2.5
// 
// Parameters: origin, rgb color [ex: ( 1 0 0 ) for red], name, health, base angle, mount wall (0 = floor, 1 = left wall, 2 = ceiling, 3 = right wall), ...
// ... orient (0 or 1 = rotate along x or y axis; only applies when mountwall = 1 or 3), ... remove after death (0 = no, disable spotlight; 1 = remove spotlight, keep base; 2 = remove everything), ...
// ... initial spotlight angles, $pathname of SplinePath nodes to follow automatically.
//
// Examples (without paths, and with paths):
//	exec map_triggers/player_spotlight.scr ( 4045 -3439 -128 ) ( 1 0 0 ) s0 700 90 0 0 1	// red
//	exec map_triggers/player_spotlight.scr ( 448 -3651 50 ) ( 1 1 0 ) s1 700 180 1 1 1	// yellow
//	exec map_triggers/player_spotlight.scr ( -5912 -6036 -32 ) ( 0 1 0 ) s2 700 90 0 0 1	// green
//	exec map_triggers/player_spotlight.scr ( -3111 2143 512 ) ( 0 0 1 ) s3 700 -90 0 0 1	// blue
//
//	exec global/player_spotlight.scr ( 2270.25 2047.58 320 ) ( 1 0 0 ) s_auto0 9999 270 0 0 1 ( 0 0 0 ) spotpath1_2
//	exec global/player_spotlight.scr ( 785.25 2048.58 320 ) ( 0 1 0 ) s_auto1 9999 270 0 0 1 ( 0 0 0 ) spotpath1_1
//	exec global/player_spotlight.scr ( 70.25 2464.58 328 ) ( 0 0 1 ) s_auto2 9999 270 0 0 1 ( 0 0 0 ) spotpath1_3
//

main local.origin local.color local.name local.health local.anglestart local.mountwall local.orient local.removeafterdeath local.initially_on local.spotangles_init local.path:

exec global/aliascache_triggersounds.scr spotlight

	local.s0 = spawn script_model targetname (local.name)
	local.s0 model miscobj/searchlightbase.tik
	local.s0.origin = ( local.origin )
	local.s0.color = ( local.color )
	if(local.health <= 0) { local.s0.health = 999999; local.indestructible = 1 }
	if(local.health > 0) { local.s0.health = local.health }
	local.s0 notsolid
	local.s0.removeafterdeath = local.removeafterdeath // if 1, spotlight and base will be gone when health <= 0.
	local.s0.initially_on = local.initially_on

	if(local.mountwall != 1 && local.mountwall != 2 && local.mountwall != 3 ) { local.s0.angles = ( 0 local.anglestart 0 ) }
	if(local.mountwall == 1 ) 
	{ 
		if(local.orient != 1) { local.s0.angles = ( local.anglestart 0 90 ) }
		if(local.orient == 1) { local.s0.angles = ( local.anglestart -90 90 ) }
	}
	if(local.mountwall == 2 ) { local.s0.angles = ( 0 local.anglestart 180 ) }
	if(local.mountwall == 3 ) 
	{ 
		if(local.orient != 1) { local.s0.angles = ( local.anglestart 0 -90 ) }
		if(local.orient == 1) { local.s0.angles = ( local.anglestart -90 -90 ) }
	}

	thread makespot local.s0 local.mountwall local.name local.indestructible local.orient local.spotangles_init local.path
end

makespot local.spotlight local.mountwall local.name local.indestructible local.orient local.spotangles_init local.path:

	if(local.spotlight.color == NIL)
		local.color = ( 1 1 1 )
	else
		local.color = local.spotlight.color
	
	if(local.mountwall != 1 && local.mountwall != 2 && local.mountwall != 3 ) 
	{ 
		local.spot = spawn script_model model miscobj/searchlightoff.tik origin (local.spotlight.origin + ( 0 0 32 )) spawnflags 1 
	}
	if(local.mountwall == 1) 
	{ 
		if(local.orient != 1) { local.spot = spawn script_model model miscobj/searchlightoff.tik origin (local.spotlight.origin + ( 0 -32 0 )) spawnflags 1 } 
		if(local.orient == 1) { local.spot = spawn script_model model miscobj/searchlightoff.tik origin (local.spotlight.origin + ( -32 0 0 )) spawnflags 1 } 
	}
	if(local.mountwall == 2) { local.spot = spawn script_model model miscobj/searchlightoff.tik origin (local.spotlight.origin + ( 0 0 -32 )) spawnflags 1 }
	if(local.mountwall == 3) 
	{ 
		if(local.orient != 1) { local.spot = spawn script_model model miscobj/searchlightoff.tik origin (local.spotlight.origin + ( 0 32 0 )) spawnflags 1 }
		if(local.orient == 1) { local.spot = spawn script_model model miscobj/searchlightoff.tik origin (local.spotlight.origin + ( 32 0 0 )) spawnflags 1 }
	}

	local.spot.destroyed = 0
	if(local.spotangles_init == NIL) { local.spot.angles = local.spotlight.angles + ( 0 180 0 ) }
	if(local.spotangles_init != NIL) { local.spot.angles = local.spotangles_init }
	local.spot.targetname = ("s_spot_" + local.name)

	local.spotdamage = spawn trigger_multiple origin local.spot.origin spawnflags 144
	local.spotdamage setsize ( -30 -30 -30 )( 30 30 30 )
	local.spotlight.spotdamage = local.spotdamage

	if(local.spotlight.health == NIL || local.spotlight.health <= 0)
		local.spotdamage.health = 99999
	else
		local.spotdamage.health = local.spotlight.health

	local.spottrigger = spawn trigger_multiple origin local.spotlight.origin
	local.spottrigger setsize ( -50 -50 -50 )( 50 50 50 )
	local.spottrigger.origin = local.spotlight.origin
	local.spotlight.spottrigger = local.spottrigger

	local.groundtarget = spawn script_origin
	local.spotlight.groundtarget = local.groundtarget

	local.light = spawn script_model
	local.light model "fx/searchlight.tik"
	local.light notsolid
	local.light.origin = local.spot.origin + local.spot.forwardvector * -16
	local.light hide
	local.spotlight.originlight = local.light

	local.flare = spawn script_model targetname ("s_colorchange_" + local.name)
	local.flare model "fx/searchlight.tik"
	local.flare notsolid
	local.flare scale 3.5
	local.flare.origin = local.groundtarget.origin
	local.flare hide
	local.flare light local.color
	local.flare lightradius 250
	local.flare.on = 0 //********** Added line
	local.spotlight.flare = local.flare
	
	local.flare.s_newcolor = local.color

	local.beam = spawn func_beam origin local.spot.origin
	local.beam alpha .2
	local.beam maxoffset 0
	local.beam numsegments 20
	local.beam scale 50
	local.beam activate
	local.beam life .1
   	local.beam color local.color
   	local.beam hide
	local.spotlight.beam = local.beam

  	thread aimspot local.name local.beam local.spot local.light local.groundtarget local.flare local.spotdamage local.spottrigger local.spotlight local.indestructible

	if(local.spotlight.initially_on == 1)
	{
		local.showspot = 1
		local.light show
		local.flare show
		local.flare.on = 1
		local.beam show
	}

   while(local.spotlight != NULL && local.spot != NULL && local.spottrigger != NULL) // end if the spotlight was destroyed
   {
	local.spottrigger waittill trigger
	local.spottrigger nottriggerable
	local.player = parm.other

	if(local.path != NIL && local.player != NULL) { local.player thread replace_spotlight local.name local.beam local.light local.groundtarget local.flare local.spotdamage local.spottrigger local.spotlight local.spot local.path local.orient local.mountwall }
	
	while(local.spotlight != NULL && local.spot != NULL && local.spottrigger != NULL && local.player != NULL && (local.player istouching local.spottrigger || local.player istouching local.spotlight))
	{
		local.fwd_vec = angles_toforward local.player.viewangles
		local.start = local.player gettagposition "Bip01 Head"

		local.range = 10240

		local.groundtarget.origin = trace (local.start + local.fwd_vec * 64) (local.start + local.fwd_vec * local.range ) 0

		local.s_vec = ( local.groundtarget.origin - local.spot.origin )
		local.s_ang = vector_toangles(local.s_vec)
		local.s_ang[0] = (local.s_ang[0] * -1) 	// un-invert pitch rotation for floor & ceiling mounts

		local.spot.angles = local.s_ang + ( 0 180 0 ) // keep spotlight's angles = local.player's angles.

		// for left-side wall mounts (local.mountwall == 1) and right-side wall mounts (local.mountwall == 3) only,
		// make spotlightbase always rotate clockwise when looking upward. also check which side of spotlight the player is facing.
		// spotlightbase quickly reorients itself after looking vertically up or down.
		//

		if(local.mountwall != 1 && local.mountwall != 2 && local.mountwall != 3 ) { local.spotlight.angles = ( 0 local.s_ang[1] 0 ) } // default, mountwall = 0, floor mounts.

		if(local.mountwall == 2) { local.spotlight.angles = ( 0 local.s_ang[1] 180 ) } // mountwall = 2, ceiling spotlightbase mounts.

		if(local.orient != 1) 
		{
			if(local.mountwall == 1 && ((local.player.angles[1] >= 90 && local.player.angles[1] < 180) || (local.player.angles[1] >= 180 && local.player.angles[1] < 270)) ) 
			{ 
				local.spotlight.angles = ( local.s_ang[0] 0 90 )
			}
			if(local.mountwall == 1 && ((local.player.angles[1] < 90 && local.player.angles[1] >= 0) || (local.player.angles[1] < 360 && local.player.angles[1] >= 270)) )
			{ 
				local.spotlight.angles = ( -local.s_ang[0] 0 90 )					
			}
	
			if(local.mountwall == 3 && ((local.player.angles[1] >= 90 && local.player.angles[1] < 180) || (local.player.angles[1] >= 180 && local.player.angles[1] < 270)) ) 
			{ 
				local.spotlight.angles = ( local.s_ang[0] 0 -90 )
			}
			if(local.mountwall == 3 && ((local.player.angles[1] < 90 && local.player.angles[1] >= 0) || (local.player.angles[1] < 360 && local.player.angles[1] >= 270)) )
			{ 
				local.spotlight.angles = ( -local.s_ang[0] 0 -90 )
			}
		}

		if(local.orient == 1) 
		{ 
			if(local.mountwall == 1 && ((local.player.angles[1] < 90 && local.player.angles[1] >= 0) || (local.player.angles[1] >= 90 && local.player.angles[1] < 180)) ) 
			{ 
				local.spotlight.angles = ( local.s_ang[0] 0 90 ) + ( 0 -90 0 )
			}
			if(local.mountwall == 1 && ((local.player.angles[1] >= 180 && local.player.angles[1] < 270) || (local.player.angles[1] < 360 && local.player.angles[1] >= 270)) )
			{ 
				local.spotlight.angles = ( -local.s_ang[0] 0 90 ) + ( 0 -90 0 )
			}
	
			if(local.mountwall == 3 && ((local.player.angles[1] < 90 && local.player.angles[1] >= 0) || (local.player.angles[1] >= 90 && local.player.angles[1] < 180)) ) 
			{ 
				local.spotlight.angles = ( local.s_ang[0] 0 -90 ) + ( 0 -90 0 )
			}
			if(local.mountwall == 3 && ((local.player.angles[1] >= 180 && local.player.angles[1] < 270) || (local.player.angles[1] < 360 && local.player.angles[1] >= 270)) )
			{ 
				local.spotlight.angles = ( -local.s_ang[0] 0 -90 ) + ( 0 -90 0 )
			}
		}

		local.light.origin = local.spot.origin + local.spot.forwardvector * -8 
	
		if(local.player.useheld == 1)
		{
			wait .2
			if(local.showspot !=1)
			{
				local.showspot = 1
				local.light show
				local.flare show
				local.flare.on = 1//********** Added line
				local.beam show
			}
			else
			{
				local.beam hide
				local.showspot = 0
				local.light hide
				local.flare hide
				local.flare.on = 0 //********** Added line
			}
		}
		waitframe

		local.random1 = (randomint(100) / 100.0000)
		local.random2 = (randomint(100) / 100.0000)
		local.random3 = (randomint(100) / 100.0000)

		if(level.spotlight[local.name] == 1 || level.flags[allspotlights] == 1)
		{
			if(local.flare != NULL) { local.flare light ( local.random1 local.random2 local.random3 ) }
			if(local.beam != NULL) { local.beam color ( local.random1 local.random2 local.random3 ) }
			$("s_colorchange_" + local.name).s_newcolor = ( local.random1 local.random2 local.random3 )

			level.spotlight[local.name] = 0
			level.flags[allspotlights] = 0
		} 

		if(level.spotlight_rainbow[local.name] == 1 || level.flags[allspotlights_rainbow] == 1)
		{
			if(local.flare != NULL) { local.flare light ( local.random1 local.random2 local.random3 ) }
			if(local.beam != NULL) { local.beam color ( local.random1 local.random2 local.random3 ) }
			$("s_colorchange_" + local.name).s_newcolor = ( local.random1 local.random2 local.random3 )
		}

		if(level.spotlight_rainbow[local.name] == 3 || level.flags[allspotlights_rainbow] == 3)
		{
			if(local.c == NIL) { local.c = 0 }
			local.r = randomint(100)
			if(local.c > local.r)
			{
				if(local.flare != NULL) { local.flare light ( local.random1 local.random2 local.random3 ) }
				if(local.beam != NULL) { local.beam color ( local.random1 local.random2 local.random3 ) }
				$("s_colorchange_" + local.name).s_newcolor = ( local.random1 local.random2 local.random3 )
				local.c = 0
			}
			local.c++
		}
		else { local.c = 0 }

		if(local.spotlight == NULL || local.spot == NULL || local.spottrigger == NULL || local.spot.destroyed == 1) { break }
	}
	if(local.spotlight == NULL || local.spot == NULL || local.spottrigger == NULL || local.spot.destroyed == 1) { break }

   	local.spottrigger triggerable
   }
end

aimspot local.name local.beam local.spot local.light local.groundtarget local.flare local.spotdamage local.spottrigger local.spotlight local.indestructible:

   while(local.spotlight != NULL && local.spot != NULL && local.spottrigger != NULL && local.spot.destroyed != 1)
   {
	local.groundtarget.origin = local.spot.origin + local.spot.forwardvector * -10240

	local.p = trace local.spot.origin local.groundtarget.origin 0

	local.beam endpoint local.p

	local.flare.origin = local.p

   // ******** Added section **************************

	if(local.flare.on == 1)
	{
		for(local.i=1; local.i <= $player.size; local.i++)
		{
			local.dist_xy = vector_length(( local.p[0] local.p[1] 0 ) - ( $player[local.i].origin[0] $player[local.i].origin[1] 0 ))
			if(local.dist_xy < 50 && local.p[2] >= $player[local.i].origin[2] && ((local.p[2] <= $player[local.i].origin[2] + 95 && $player[local.i] getposition == "standing") || (local.p[2] <= $player[local.i].origin[2] + 55 && $player[local.i] getposition == "crouching")))
			{
				if($("s_colorchange_" + local.name).size <= 1)
				{
 					$player[local.i] thread map_triggers/led_spotlight.scr::spotted $("s_colorchange_" + local.name).s_newcolor[0] $("s_colorchange_" + local.name).s_newcolor[1] $("s_colorchange_" + local.name).s_newcolor[2]
				}
			}
		}
	}

   //****************************************************

	if(local.spotdamage.health <= 0 && local.indestructible != 1)
	{
		local.spark = spawn script_model
		local.spark model "fx/fx_spotlighthit.tik"
		local.spark.origin = local.spot.origin
		local.spark notsolid
		local.spark anim start

		local.spot playsound exp_searchlight
		local.spot.destroyed = 1
		waitframe

		if(local.spotlight.removeafterdeath >= 1) 
		{ 
			if(local.spotlight.removeafterdeath >= 2) { local.spotlight remove } // spotlight base
			local.spot remove						     // spotlight light
		}

		local.light delete
		local.flare delete
		local.spottrigger delete
		local.spotdamage delete
		local.groundtarget delete
		local.beam delete

		wait 0.1 // cannot use "waitframe" for "fx_spotlighthit.tik", the spark animation gets removed too fast.
		local.spark remove
		break
	}
   	waitframe
   }

   if(local.spotlight == NULL) // if the spotlightbase is removed, remove everything else.
   {
	if(local.beam != NULL) { local.beam delete }
	if(local.spot != NULL) { local.spot delete }
	if(local.light != NULL) { local.light delete }
	if(local.groundtarget != NULL) { local.groundtarget delete }
	if(local.flare != NULL) { local.flare delete }
	if(local.spotdamage != NULL) { local.spotdamage delete }
	if(local.spottrigger != NULL) { local.spottrigger delete }
   }
end

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

replace_spotlight local.name local.beam local.light local.groundtarget local.flare local.spotdamage local.spottrigger local.spotlight local.spot local.path local.orient local.mountwall:

	local.c = 0
	while(local.spotlight != NULL && local.spot != NULL && local.c < 3)
	{
		local.angles0 = int(local.spot.angles[0])
		local.angles1 = int(local.spot.angles[1])
		wait 0.1
		if(local.spotlight != NULL && local.spot != NULL && int(local.spot.angles[0]) == local.angles0 && int(local.spot.angles[1]) == local.angles1)
		{
			if(self == NULL || !isalive self || (!(self istouching local.spottrigger) && !(self istouching local.spotlight))) { local.c = local.c + 0.1 }
		}
	}

	if(local.spotlight != NULL && local.spot != NULL)
	{
		local.origin = local.spotlight.origin
		local.color = local.spotlight.color
		local.health = local.spotlight.health
		local.removeafterdeath = local.spotlight.removeafterdeath

		local.s_vec = (local.spot.origin - local.path.origin)
		local.s_ang = vector_toangles(local.s_vec)
		local.anglestart = local.s_ang[1]

		local.spotlight remove
		local.beam remove
		local.spot remove
		local.light remove
		local.groundtarget remove
		local.flare remove
		local.spotdamage remove
 		local.spottrigger remove

		exec global/player_spotlight.scr local.origin local.color local.name local.health local.anglestart local.mountwall local.orient local.removeafterdeath local.s_ang local.path
	}
end