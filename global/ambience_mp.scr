// This script recreates ambience sound changes between different environments in singleplayer maps, for multiplayer purposes.
// Originally, global/ambient.scr would run only the "normal" soundtrack (from music/[map name].mus in Pak0.pk3), or switch between soundtracks if $player walked through any $interior or $exterior triggers.
// Players that are inside of a volume will run stufftext "tmstop; tmloop [music filepath]" only if the music filepath is different from their current playing music.
// Players will only change music once per 40 frames, preventing spamming when standing at ambience volume borders.
// The script can also make players run stufftext "s_musicvolume 1" if local.forcemaxvolume = 1 in the main script, to ensure that all players hear the ambience.
// Music volume must be greater than 0% to hear these ambient sounds.
//
// If debug iprint = 1 (local.debug = 1), players will iprint music filepath each time a new ambient sound plays, and music will change faster (once per frame).
// If a player walks into an area where 2+ volumes are still overlapping (should never happen, but runs if the script failed to see the overlap), the player's origin is printed and the script ends.
// Ambience volumes are like triggers, but triggers aren't actually spawned. They should fill the whole interior of a building, or whatever 3D region that players will hear interior ambience within it (or other special ambiences).
// Circular volumes (light houses), curved or diagonal walls (not along X-Y axis) will require several small rectangular volumes stacked like pancakes to fill in these interior areas.
//
//
//
// Main script parameters: outside/exterior ambient music filepath, force max volume (0 = no, 1 = yes), debug iprint (0 = no, 1 = iprint music, change music faster).
//
// First, create a "level.spawnambs = makeArray" and add various ambience volumes, starting with origin and both -/+ setsizes, then the music to be played inside it.
// Then, run "exec global/ambience_mp.scr local.music" where "local.music" = ambience music filepath for outdoors music to be played (the default ambience to play when players are outside all other volumes).
// If any 2 volumes are overlapping and/or touching in all 3 axes (x,y,z), then the 2nd volume is removed and replaced with 0s in the makeArray.
// Errors print suggestions for fixing a volume's setsizes or origin if any volume is deleted.
// If level.spawnamb does not exist or doesn't have any volumes, the map's ambience will default to "local.music".
//
// Parameters: origin, setsize 1, setsize 2, indoors ambient music filepath.
// Example:
//	ambience: // make sure the spawnamb volumes are not touching or overlapping!!!
//
//		level.spawnamb = makeArray // map M2L1.
//			( -1903 -3775 380 ) ( 0 0 0 ) ( 351 351 379 ) sound/amb_stereo/Amb_M2_SnowInt.mp3		// amb[1]
//			( -73 2415 360 ) ( 0 -911 0 ) ( 1528 0 423 ) sound/amb_stereo/Amb_M2_SnowInt.mp3		// amb[2]
//			( 1455 3343 380 ) ( -1487 -927 0 ) ( 0 0 226 ) sound/amb_stereo/Amb_M2_SnowInt.mp3		// amb[3]
//			( 2816 7879 -307 ) ( 0 -1108 0 ) ( 1455 0 882 ) sound/amb_stereo/Amb_M2_SubFacility.mp3		// amb[4]
//		endArray
//
//		exec global/ambience_mp.scr sound/amb_stereo/Amb_M2_SnowExt.mp3
//		//exec global/ambience_mp.scr sound/amb_stereo/Amb_M2_SnowExt.mp3 1 1 // outdoors music filepath, force max music volume, debug iprint.
//	end

main local.music local.forcemaxvolume local.debug:

	local.z = 0
	while(level.ambient_script_run != 1 && local.z < 20) { local.z++; waitframe } // wait for global/ambient.scr to run first, or wait 20 frames.

	if($interior != NULL) { $interior remove }
	if($exterior != NULL) { $exterior remove }

	if(local.music == NIL) { println("----- ERROR ambience_mp.scr::main. 'Music' parameter is missing! If NIL, use sound/null.wav instead."); local.e = 1 }
	if(local.music.size < 4) { println("----- ERROR ambience_mp.scr::main. 'Music' parameter has an invalid music file string! If NIL, use sound/null.wav instead."); local.e = 1 }
	else if((local.music[local.music.size - 1] != "3" && local.music[local.music.size - 1] != "v") || (local.music[local.music.size - 2] != "p" && local.music[local.music.size - 2] != "a") || (local.music[local.music.size - 3] != "m" && local.music[local.music.size - 3] != "w") || local.music[local.music.size - 4] != ".") { println("----- ERROR ambience_mp.scr::main. 'Music' parameter is not a valid music file. Must be an .mp3 or .wav."); local.e = 1 }
	
	if(local.e != 1)
	{
		for(local.a = 1; local.a <= level.spawnamb.size; local.a++)
		{
			if(level.spawnamb[local.a][1][2] == NIL) { println("----- ERROR Ambience: amb[" + local.a + "] has an invalid origin parameter!"); local.e = 1 }
			if(level.spawnamb[local.a][2][2] == NIL) { println("----- ERROR Ambience: amb[" + local.a + "] has an invalid setsize1 parameter!"); local.e = 1 }
			if(level.spawnamb[local.a][2][0] > 0 || level.spawnamb[local.a][2][1] > 0 || level.spawnamb[local.a][2][2] > 0) { println("----- ERROR Ambience: amb[" + local.a + "] has a setsize1 value > 0!"); local.e = 1 }
			if(level.spawnamb[local.a][3][2] == NIL) { println("----- ERROR Ambience: amb[" + local.a + "] has an invalid setsize2 parameter!"); local.e = 1 }
			if(level.spawnamb[local.a][3][0] < 0 || level.spawnamb[local.a][3][1] < 0 || level.spawnamb[local.a][3][2] < 0) { println("----- ERROR Ambience: amb[" + local.a + "] has a setsize2 value < 0!"); local.e = 1 }

			if(level.spawnamb[local.a][4] == NIL) { println("----- ERROR Ambience: amb[" + local.a + "]'s music file string cannot be found!"); local.e = 1 }
			if(level.spawnamb[local.a][4].size < 4) { println("----- ERROR Ambience: amb[" + local.a + "] has an invalid music file string!"); local.e = 1 }
			else if((level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 1] != "3" && level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 1] != "v") || (level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 2] != "p" && level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 2] != "a") || (level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 3] != "m" && level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 3] != "w") || level.spawnamb[local.a][4][level.spawnamb[local.a][4].size - 4] != ".") { println("----- ERROR Ambience: 'amb[" + local.a + "]'s music file string must be an .mp3 or .wav!"); local.e = 1 }
		}
	}

	if(local.e == 1) { println("----- Failed to load ambience_mp.scr."); end }

	println("Loading ambience_mp.scr...")
	waitthread spawnamb_initial_check
	if(level.spawnamb == NIL || level.spawnamb.size < 1) { println("Ambience set to " + local.music + ".") } // default map's soundtrack to "outdoors" local.music ambience if level.spawnamb array is NIL or has nothing in its array.

	while(getcvar("g_ubergametype") == "bb" && level.bbactive != 0) { waitframe } // wait until base-building is finished first, before playing ambience

	soundtrack sound/null.wav // turn off the map's background ambience (from Pak0.pk3, music/[map name].mus).
	thread playamb local.music local.forcemaxvolume local.debug
end

spawnamb_initial_check:

	for(local.a = 1; local.a <= level.spawnamb.size; local.a++) // compare amb[a] with amb[a - 1].
	{
		if(level.spawnamb[local.a][1] != 0 && level.spawnamb[local.a][2] != 0 && level.spawnamb[local.a][3] != 0 && level.spawnamb[local.a][4] != 0)
		{
			local.X_min = level.spawnamb[local.a][1][0] + level.spawnamb[local.a][2][0] // check if 2 or more ambience volumes are overlapping each other. without removing one,
			local.X_max = level.spawnamb[local.a][1][0] + level.spawnamb[local.a][3][0] // players will be spamming "tmstartloop" commands between two different music files if standing in both volumes.
			local.Y_min = level.spawnamb[local.a][1][1] + level.spawnamb[local.a][2][1]
			local.Y_max = level.spawnamb[local.a][1][1] + level.spawnamb[local.a][3][1]
			local.Z_min = level.spawnamb[local.a][1][2] + level.spawnamb[local.a][2][2]
			local.Z_max = level.spawnamb[local.a][1][2] + level.spawnamb[local.a][3][2]

			for(local.b = 1; local.b <= level.spawnamb.size; local.b++) // compare amb[a + 1] with amb[a].
			{
				if(level.spawnamb[local.b][1] != 0 && level.spawnamb[local.b][2] != 0 && level.spawnamb[local.b][3] != 0 && level.spawnamb[local.b][4] != 0)
				{
					local.X_min2 = level.spawnamb[local.b][1][0] + level.spawnamb[local.b][2][0]
					local.X_max2 = level.spawnamb[local.b][1][0] + level.spawnamb[local.b][3][0]
					local.Y_min2 = level.spawnamb[local.b][1][1] + level.spawnamb[local.b][2][1]
					local.Y_max2 = level.spawnamb[local.b][1][1] + level.spawnamb[local.b][3][1]
					local.Z_min2 = level.spawnamb[local.b][1][2] + level.spawnamb[local.b][2][2]
					local.Z_max2 = level.spawnamb[local.b][1][2] + level.spawnamb[local.b][3][2]
		
					local.match = 0
					if(local.a != local.b)
					{
						if((local.X_min >= local.X_min2 && local.X_min <= local.X_max2) || (local.X_max >= local.X_min2 && local.X_max <= local.X_max2))
						{
							if(local.X_min >= local.X_min2 && local.X_min <= local.X_max2) { local.adjust_xmin = 1 } // "adjust" integers are for errors only.
							if(local.X_max >= local.X_min2 && local.X_max <= local.X_max2) { local.adjust_xmax = 1 }
							if(local.adjust_xmin == 1 && local.adjust_xmax == 1) { local.adjust_xmin = 0; local.adjust_xmax = 0 }
							local.match++
						}
						if((local.Y_min >= local.Y_min2 && local.Y_min <= local.Y_max2) || (local.Y_max >= local.Y_min2 && local.Y_max <= local.Y_max2))
						{
							if(local.Y_min >= local.Y_min2 && local.Y_min <= local.Y_max2) { local.adjust_ymin = 1 }
							if(local.Y_max >= local.Y_min2 && local.Y_max <= local.Y_max2) { local.adjust_ymax = 1 }
							if(local.adjust_ymin == 1 && local.adjust_ymax == 1) { local.adjust_ymin = 0; local.adjust_ymax = 0 }
							local.match++
						}
						if((local.Z_min >= local.Z_min2 && local.Z_min <= local.Z_max2) || (local.Z_max >= local.Z_min2 && local.Z_max <= local.Z_max2))
						{
							if(local.Z_min >= local.Z_min2 && local.Z_min <= local.Z_max2) { local.adjust_zmin = 1 }
							if(local.Z_max >= local.Z_min2 && local.Z_max <= local.Z_max2) { local.adjust_zmax = 1 }
							if(local.adjust_zmin == 1 && local.adjust_zmax == 1) { local.adjust_zmin = 0; local.adjust_zmax = 0 }
							local.match++
						}
					}

					if(local.match >= 3)
					{
						println("----- ERROR Ambience: cannot play amb[" + local.b + "] due to setsizes touching/overlapping amb[" + local.a + "]. Fix one of these below:")
						if(local.adjust_xmin == 1 || local.adjust_xmax == 1) { println("----- lower amb[" + local.b + " or " + local.a + "]'s setsizes[0] value or move origin.") }
						if(local.adjust_ymin == 1 || local.adjust_ymax == 1) { println("----- lower amb[" + local.b + " or " + local.a + "]'s setsizes[1] value or move origin.") }
						if(local.adjust_zmin == 1 || local.adjust_zmax == 1) { println("----- lower amb[" + local.b + " or " + local.a + "]'s setsizes[2] value or move origin.") }
		
						if(local.adjust_xmin != 1 && local.adjust_xmax != 1 && local.adjust_ymin != 1 && local.adjust_ymax != 1 && local.adjust_zmin != 1 && local.adjust_zmax != 1)
						{
							println("----- lower amb[" + local.b + " or " + local.a + "]'s setsizes[0] value or move origin.")
							println("----- lower amb[" + local.b + " or " + local.a + "]'s setsizes[1] value or move origin.")
							println("----- lower amb[" + local.b + " or " + local.a + "]'s setsizes[2] value or move origin.")
						}
						
						level.spawnamb[local.b][4] = 0; level.spawnamb[local.b][3] = 0; level.spawnamb[local.b][2] = 0; level.spawnamb[local.b][1] = 0 // remove the volume by replacing all values with "0".
						break
					}
				}
			}
		}
	}
end

playamb local.music local.forcemaxvolume local.debug:

	while(1)
	{
		for(local.a = 1; local.a <= level.spawnamb.size; local.a++)
		{
			for(local.i = 1; local.i <= $player.size; local.i++)
			{
				if(level.spawnamb[local.a][1] != 0 && level.spawnamb[local.a][2] != 0 && level.spawnamb[local.a][3] != 0 && level.spawnamb[local.a][4] != 0)
				{
					local.X_min[local.a] = level.spawnamb[local.a][1][0] + level.spawnamb[local.a][2][0]
					local.X_max[local.a] = level.spawnamb[local.a][1][0] + level.spawnamb[local.a][3][0]
					local.Y_min[local.a] = level.spawnamb[local.a][1][1] + level.spawnamb[local.a][2][1]
					local.Y_max[local.a] = level.spawnamb[local.a][1][1] + level.spawnamb[local.a][3][1]
					local.Z_min[local.a] = level.spawnamb[local.a][1][2] + level.spawnamb[local.a][2][2]
					local.Z_max[local.a] = level.spawnamb[local.a][1][2] + level.spawnamb[local.a][3][2] // int($player.origins) prevent music from changing to "outdoors" if standing at borders of 2+ "indoors" volumes.

					if(int($player[local.i].origin[0]) >= local.X_min[local.a] && int($player[local.i].origin[0]) <= local.X_max[local.a] && int($player[local.i].origin[1]) >= local.Y_min[local.a] && int($player[local.i].origin[1]) <= local.Y_max[local.a] && int($player[local.i].origin[2]) >= local.Z_min[local.a] && int($player[local.i].origin[2]) <= local.Z_max[local.a])
					{
						if($player[local.i].ambience_playing != level.spawnamb[local.a][4] && $player[local.i].ambience_playing_count != NIL && ($player[local.i].ambience_playing_count >= 40 || local.debug == 1))
						{
							if(local.forcemaxvolume == 1) { $player[local.i] stufftext ("s_musicvolume 1; tmstop; tmstartloop " + level.spawnamb[local.a][4]) }
							else { $player[local.i] stufftext ("tmstop; tmstartloop " + level.spawnamb[local.a][4]) }
	
							$player[local.i].ambience_playing = level.spawnamb[local.a][4]
							$player[local.i].ambience_playing_count = 0
	
							if(local.debug == 1) { $player[local.i] iprint ("Playing ambience: " + $player[local.i].ambience_playing) }
						}
					}
					else
					{
						if($player[local.i].ambience_outside_count == NIL) { $player[local.i].ambience_outside_count = 0 }
						$player[local.i].ambience_outside_count++
					}
				}

				else
				{
					if($player[local.i].ambience_outside_count == NIL) { $player[local.i].ambience_outside_count = 0 }
					$player[local.i].ambience_outside_count++
				}
			}
		}

		for(local.i = 1; local.i <= $player.size; local.i++)
		{
			if($player[local.i].ambience_playing_count == NIL) { $player[local.i].ambience_playing_count = 40 } // immediately begin playing music, only when first joining server.
			$player[local.i].ambience_playing_count++
			if($player[local.i].ambience_playing_count >= 40) { $player[local.i].ambience_playing_count = 40 } // wait 40 frames before a new ambience can be played, to prevent spamming "tmloop" between 2 ambiences.

			if($player[local.i].ambience_outside_count != NIL)
			{
				if($player[local.i].ambience_outside_count >= level.spawnamb.size && $player[local.i].ambience_playing != local.music && $player[local.i].ambience_playing_count != NIL && ($player[local.i].ambience_playing_count >= 40 || local.debug == 1))
				{
					if(local.forcemaxvolume == 1) { $player[local.i] stufftext ("s_musicvolume 1; tmstop; tmstartloop " + local.music) }
					else { $player[local.i] stufftext ("tmstop; tmstartloop " + local.music) }

					$player[local.i].ambience_playing = local.music // player is outside of all level.spawnamb volumes, play the exterior "outdoors" ambience.
					$player[local.i].ambience_playing_count = 0

					if(local.debug == 1) { $player[local.i] iprint ("Playing ambience: " + $player[local.i].ambience_playing) }
				}

				if($player[local.i].ambience_outside_count < level.spawnamb.size - 1) // this should never happen, but this runs if somehow overlaps fail to get detected.
				{
					iprintlnbold("----- ERROR Ambience: 2+ overlapping volumes detected at $player[" + local.i + "].origin = ( " + int($player[local.i].origin[0]) + " " + int($player[local.i].origin[1]) + " " + int($player[local.i].origin[2]) + " )")
					iprintlnbold("----- Stopping ambience_mp.scr.")
					println("----- ERROR Ambience: 2+ overlapping volumes detected at $player[" + local.i + "].origin = ( " + int($player[local.i].origin[0]) + " " + int($player[local.i].origin[1]) + " " + int($player[local.i].origin[2]) + " )")
					println("----- Stopping ambience_mp.scr.")
					end
				}
			}
			$player[local.i].ambience_outside_count = 0
		}
		waitframe
	}
end
