// This script auto-respawns dead players to spectate their killers, creating "kill cams" or "death cams".
// While spectating your killer, press FIRE to fully respawn as normal.
// Type into the server's console "g_deathcam 0" to disable this mod, or "g_deathcam 1" to re-enable it.
// This mod only works for MOHAA Reborn 1.12.

main:

////////////////////////////////////////////////////////////////////////

level.deathcam_respawn = 1			// if set to "1", dead players will auto-respawn after a few seconds.
level.deathcam_time_until_spectate = 0.0	// time delay in seconds until killed players begin spectating their killers (ideally set to "0" or "1.6").
						// if < 1.6, dead bodies will disappear instead, and this variable will revert to "waitframe", or 0.05.
						// if >= 1.6, players can respawn much sooner by pressing/holding FIRE.

////////////////////////////////////////////////////////////////////////

	if(level.deathcam_init == 1) { end }
	level.deathcam_init = 1

	if(level.check_player_deaths != 1) { local.result = registerev kill global/custom_deaths.scr::assign_killer }
	exec global/custom_deaths.scr::remove_deadbodies // need this script for dead bodies to be visible.
	level.check_player_deaths = 1

	if(getcvar("g_ubergametype") == "cyb" || getcvar("g_ubergametype") == "snd" || getcvar("g_ubergametype") == "ft")
	{
		if(getcvar("g_deathcam") != "0") { setcvar "g_deathcam" "2" }
		thread deathcam_cvar
		end
	}

	if(getcvar("g_deathcam") == "" || getcvar("g_deathcam") == "2") { setcvar "g_deathcam" "1" }
	if(getcvar("g_deathcam") == "0") { level.deathcam = 0 }
	thread deathcam_cvar
	thread deathcams_cvar

	while(1)
	{
		if(level.deathcam != 0 && $player.size >= 1)
		{
			for(local.i = 1; local.i <= $player.size; local.i++)
			{
				if($player[local.i].deathcam_killer != NIL && $player[local.i].deathcam_killer != NULL && $player[local.i].deathcam_killer.dmteam != "spectator")
				{
					$player[local.i] thread spectate_killer
				}
			}
		}
		waitframe
	}
end

//-----------------------------------------------------------------------------

spectate_killer:

	if(self.spectating_killer == 1) { end }
	self.spectating_killer = 1

	self.dead = 1
	local.team = self.dmteam
	local.killer_team = self.deathcam_killer.dmteam
	local.auto_respawn_time = 0

	if(level.deathcam_time_until_spectate < 1.6) { waitframe } // "waitframe" allows the dead player's weapon and health pack to drop at their own dead body.
	else
	{
		wait level.deathcam_time_until_spectate
		local.respawnable = 1
	}

	if(self == NULL || self.dmteam != local.team || self.deathcam_killer == NIL || self.deathcam_killer == NULL || !isalive self.deathcam_killer || self.deathcam_killer.dmteam != local.killer_team || level.change_team_score == 1 || level.bbactive == 0)
	{
		while(self != NULL && !isalive self) { waitframe }
		if(self != NULL) { self.dead = 0; self.spectating_killer = 0; self.deathcam_killer = NIL }
		end
	}

	self respawn
	self notsolid
	self nodamage
	self hide
	self noclip
	self physics_off
	local.deathcam_killer_origin = self.deathcam_killer.origin

	while(self != NULL && self.dmteam == local.team && self.deathcam_killer != NIL && self.deathcam_killer != NULL)
	{
		if(self.health <= 0 && local.auto_respawn_time > 0.05) // if minimum "wait 1.6" does not run before the "self respawn" line above, the dead player's health will eventually return to 0 and respawn a new dead body behind the killer, since their death animation technically didn't finish yet.
		{
			self.origin = ( 99999 99999 99999 ) // hide the secondary dead body far off-map, only if "remove_deadbodies" thread wasn't loaded.
			self.dead = 1
			self respawn
			self notsolid
			self nodamage
			self hide
			self noclip
			self physics_off
			local.respawnable = 1
		}

		if(!isalive self.deathcam_killer || self.deathcam_killer.dmteam != local.killer_team || local.stayhere == 1)
		{
			self physics_on
			if(local.specorg == NIL) { local.specorg = self.deathcam_killer.origin + ( 0 0 100 ) }
			self.origin = (trace local.specorg (local.specorg + ( 0 0 0 ) + ((angles_toforward self.viewangles) * -50)) 1) - ( 0 0 82.125 )
			local.stayhere = 1
		}
		else if(local.stayhere != 1)
		{
			self physics_off
			if((self getposition) == "crouching") { self forcelegsstate STAND } // if the spectating player crouches, he cannot stand back up. force him to stand again (sometimes it takes a few seconds to work)

			if((self.deathcam_killer getposition) == NIL) { local.hoffset = -5; local.specorg = self.deathcam_killer.origin + ( 0 0 85 ) }
			if((self.deathcam_killer getposition) == "crouching") { local.hoffset = 0; local.specorg = self.deathcam_killer.origin + ( 0 0 65 ) }
			if((self.deathcam_killer getposition) != "crouching" && (self.deathcam_killer getposition) != NIL) { local.hoffset = 15; local.specorg = self.deathcam_killer.origin + ( 0 0 85 ) }

			local.fwd_vec = angles_toforward self.deathcam_killer.viewangles
			self.origin = (trace local.specorg (local.specorg + ( 0 0 local.hoffset ) + ((angles_toforward self.deathcam_killer.viewangles) * -50)) 1) - ( 0 0 82.125 )
			self face self.deathcam_killer.viewangles // does not work for players that are currently dead
		}

		if((local.respawnable == 1 || local.auto_respawn_time > 5) && (self.fireheld == 1 || level.deathcam_respawn == 1)) { break } // force respawn if dead player somehow waited longer than 5 seconds.

		local.deathcam_killer_origin = self.deathcam_killer.origin
		local.auto_respawn_time += 0.05 // each waitframe = 0.05 seconds.
		waitframe
	}
	if(self != NULL)
	{
		self physics_on
		while(self != NULL && self.dmteam == local.team && local.auto_respawn_time <= 5)
		{
			local.specorg = local.deathcam_killer_origin + ( 0 0 100 )
			self.origin = (trace local.specorg (local.specorg + ( 0 0 0 ) + ((angles_toforward self.viewangles) * -50)) 1) - ( 0 0 82.125 )

			local.auto_respawn_time += 0.05
			waitframe
		}
		if(self == NULL) { end }

		self.dead = 0
		if(self.dmteam == local.team) { self respawn }
		self takedamage
		if(self.dmteam != "spectator") { self solid }
		self.spectating_killer = 0
		self.deathcam_killer = NIL
	}
end

//-----------------------------------------------------------------------------

deathcam_cvar:

	local.cvar = getcvar("g_deathcam")
	while(getcvar("g_deathcam") == local.cvar) { waitframe }

	if(getcvar("g_ubergametype") != "cyb" && getcvar("g_ubergametype") != "snd" && getcvar("g_ubergametype") != "ft")
	{
		if(getcvar("g_deathcam") == "1")
		{
			println("Deathcams ENABLED. Players will spectate their killers for a few seconds.")
			level.deathcam = 1
		}
	}
	else { println("----- ERROR: Cannot use Deathcams mod in Freeze Tag, Cyber Attack, or Search & Destroy gametypes.") }

	if(getcvar("g_deathcam") == "0")
	{
		println("Deathcams DISABLED. Players will stay at their dead bodies as normal.")
		for(local.i = 1; local.i <= $player.size; local.i++) { $player[local.i].deathcam_killer = NIL }
		level.deathcam = 0
	}
	thread deathcam_cvar
end

//-----------------------------------------------------------------------------

deathcams_cvar:

	local.cvar = getcvar("g_deathcams")
	while(getcvar("g_deathcams") == local.cvar) { waitframe }

	println("----- NOTE: The cvar for deathcams mod is: g_deathcam")
	thread deathcams_cvar
end