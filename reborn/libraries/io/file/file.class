/**
 Medal of Honor: Allied Assault v1.12 REBORN
 ================================================================
 GAME.SYSTEM.IO.FILE CLASS;
 ================================================================
 BY Sor
 VERSION 1.0.0
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net
 ================================================================
*/

__init:
	if !(self && self.objectType == game.System.Object.CLASS) {
		end;
	}
	
	//<properties>
	self.extensionChar = ".";
	//</properties>
	
	self.initialized = 1; // init complete!
end;

__meta:
	self.author = "Sor";
	self.version = 1.0;
end;

/** .SafeOpen() 
		- uses queuing system when maxOpenFiles is breached.
		=> self waitthread __AddToQueue
		=> fopen() etc...
	end
	__AddToQueue()
		- if 'sv_scriptfiles' < 32
			=> return;
		- else
			=> $File.queue[$File.queue_id + $File.queue.size] = self
			=> self.queued = 1;
			=> thread __AccessQueue
		while(self.queued)
	end // unqueued and ready to open file
	__AccessQueue()
		if !($File.hasQueued) && ($File.queue.size != 0)
			=> $File.hasQueued = 1
		else 
			=> return
		
		while($File.queue.size > 0) {
			while('sv_scriptfiles' == maxOpen) 
				waitframe
			
			$File.queue[$File.queue_id].queued = 0;
			$File.queue[$File.queue_id] = NIL;
			$File.queue_id++;
			waitframe
		}
		$File.queue_id = 0
		$File.hasQueued = 0;
	end
	
	// Yeh, nice little trick with the global index :p it avoids the trouble 
	// of shifting all elements down each time and all associated havoc 
	// if a file were to be added in the midst of it. Apparently MoHAA
	// is single-threaded, it's just an illusion that we can multithread
	// here. Race conditions cannot occur in simple instructions but they
	// can occur in complex/slower routines as the game alternatively 
	// executes instructions (much like an OS kernel managing processes,
	// it iterates over the processes sending the next instruction to the
	// CPU) so it can mimic a multi-threaded environment.
	// The amount of instructions executed per thread each frame depends 
	// on the number of threads the game has to divide its resources over.
	
	// TESTING: start by opening 24 files for the duration of the test.
	// Then open 8 more files (in 8 separate threads) and time them to
	// close their filehandles after a random period of time.
	// Meanwhile, SafeOpen() 5-8 files (with variable, but tight intervals using randomfloat()) 
	// and observe behaviour of queue and those files.
*/