/**
 Medal of Honor: Allied Assault v1.12 REBORN
 ================================================================
 GAME.SYSTEM.TIME CLASS;
 ================================================================
 BY Sor
 VERSION 1.0.2
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net
 ================================================================
*/
__init:
	if !(self && self.objectType == game.System.Object.CLASS) {
		end;
	}
	
	//<functions>
	self.IsLeapYear = 		self.path::IsLeapYear;
	self.GetYear = 			self.path::GetYear;
	self.GetMonth = 		self.path::GetMonth;
	self.GetDay = 			self.path::GetDay;
	self.GetHour = 			self.path::GetHour;
	self.GetMinutes = 		self.path::GetMinutes;
	self.GetSeconds = 		self.path::GetSeconds;
	self.GetWeekday = 		self.path::GetWeekday;
	self.GetDayNames = 		self.path::GetDayNames;
	self.GetMonthNames = 	self.path::GetMonthNames;
	self.GetLengthBetween = self.path::GetLengthBetween;
	self.Compare = 			self.path::Compare;
	self.ToGMT = 			self.path::ToGMT;
	//</functions>
	
	self.initialized = 1; // init complete!
end;

__meta:
	self.author = "Sor";
	self.version = 1.0;
end;

/**
 bool IsLeapYear([<int> year])
 =================================================================
 OVERVIEW|: Determines whether this year or a specified year is a 
			leap year.
 RETURN	 |: <bool>
*/
IsLeapYear local.year:
	if ((typeof local.year)[0] != "i") {
		local.year = waitthread GetYear;
	}
	
	if ((local.year % 400) == 0) {
		end 1;
	} 
	else if ((local.year % 100) == 0) {
		end 0;
	}
	else if ((local.year % 4) == 0) {
		end 1;
	}
end 0;

/**
 int GetYear([<array/string> dateTime])
 =================================================================
 OVERVIEW|: Returns the current year, or the year in the specified 
			date as integer.
 INPUT 	 |: If specified, the argument must be a date of 'DD.MM.YYYY' 
			notation or a 1-based array of date and time.
 RETURN	 |: <int>;
			or NIL upon failure.
*/
GetYear local.date:
	if (local.date) {
		end (waitthread __ParseDateTime local.date)[6];
	}
	local.date = getdate(0);
end (int("" + local.date[6] + local.date[7] + local.date[8] + local.date[9]));

/**
 int GetMonth([<array/string> dateTime])
 =================================================================
 OVERVIEW|: Returns the current month of the year, or the month in 
			the specified date as integer.
 INPUT 	 |: If specified, the argument must be a date of 'DD.MM.YYYY' 
			notation or a 1-based array of date and time.
 RETURN	 |: <int>;
			or NIL upon failure.
*/
GetMonth local.date:
	if (local.date) {
		end (waitthread __ParseDateTime local.date)[5];
	}
	local.date = getdate(0);
end (int("" + local.date[3] + local.date[4]));

/**
 int GetDay([<array/string> dateTime])
 =================================================================
 OVERVIEW|: Returns the current day of the month, or the day in 
			the specified date as integer.
 INPUT 	 |: If specified, the argument must be a date of 'DD.MM.YYYY' 
			notation or a 1-based array of date and time.
 RETURN	 |: <int>;
			or NIL upon failure.
*/
GetDay local.date:
	if (local.date) {
		end (waitthread __ParseDateTime local.date)[4];
	}
	local.date = getdate(0);
end (int("" + local.date[0] + local.date[1]));

/**
 int GetHour([<array/string> dateTime])
 =================================================================
 OVERVIEW|: Returns the hour of the day, or the hour in the specified
			time as integer.
 INPUT 	 |: If specified, the argument must be a time of 'HH.MM.SS' 
			notation, a date of 'DD.MM.YYYY' notation or a 1-based 
			array of date and time.
 RETURN	 |: <int>
*/
GetHour local.time:
	if (local.time) {
		end (waitthread __ParseDateTime local.time)[3];
	}
	local.time = gettime(0);
end (int("" + local.time[0] + local.time[1]));

/**
 int GetMinutes([<array/string> dateTime])
 =================================================================
 OVERVIEW|: Returns the minutes of the hour, or the minutes in the 
			specified time as integer.
 INPUT 	 |: If specified, the argument must be a time of 'HH.MM.SS' 
			notation, a date of 'DD.MM.YYYY' notation or a 1-based 
			array of date and time.
 RETURN	 |: <int>
*/
GetMinutes local.time:
	if (local.time) {
		end (waitthread __ParseDateTime local.time)[2];
	}
	local.time = gettime(0);
end (int("" + local.time[3] + local.time[4]));

/**
 int GetSeconds([<array/string> dateTime])
 =================================================================
 OVERVIEW|: Returns the seconds of the minute, or the seconds in the 
			specified time as integer.
 INPUT 	 |: If specified, the argument must be a time of 'HH.MM.SS' 
			notation, a date of 'DD.MM.YYYY' notation or a 1-based 
			array of date and time.
 RETURN	 |: <int>
*/
GetSeconds local.time:
	if (local.time) {
		end (waitthread __ParseDateTime local.time)[1];
	}
	local.time = gettime(0);
end (int("" + local.time[6] + local.time[7]));

/**
 int GetWeekday()
 =================================================================
 OVERVIEW|: Returns the day of the week. 
 RETURN	 |: <int> => 	0=Sunday, 1=Monday, ..., 6=Saturday
*/
GetWeekday local.date:
	if !(local.date) {
		local.date = getdate(0);
		local.dateTime[4] = int("" + local.date[0] + local.date[1]); // day
		local.dateTime[5] = int("" + local.date[3] + local.date[4]); // month
		local.dateTime[6] = int("" + local.date[6] + local.date[7] + local.date[8] + local.date[9]); //year
	} else {
		local.dateTime = waitthread __ParseDateTime local.date;
	}
	
	// Algo:
	local.a = (14 - local.dateTime[5]) / 12;
	local.y = local.dateTime[6] - local.a
	local.m = local.dateTime[5] + (12 * local.a) - 2
end ((local.dateTime[4] + local.y + (local.y/4) - (local.y/100) + (local.y/400) + ((31*local.m)/12)) % 7);

/**
 array[0] GetDayNames()
 =================================================================
 OVERVIEW|: Returns an array where each index corresponds with a
			that day's name. The array is zero-based in order for
			it to be directly compatible with the values returned
			by $Time.GetWeekday().
 RETURN	 |: <array> => 	[0]	=>	"Sunday";
						[1] => 	"Monday";
						...
*/
GetDayNames:
	local.arr[0] = "Sunday";
	local.arr[1] = "Monday";
	local.arr[2] = "Tuesday";
	local.arr[3] = "Wednesday";
	local.arr[4] = "Thursday";
	local.arr[5] = "Friday";
	local.arr[6] = "Saturday";
end local.arr;

/**
 array[1] GetMonthNames()
 =================================================================
 OVERVIEW|: Returns an array where each index corresponds with a
			that month's name.
 RETURN	 |: <array> => 	[1]	=>	"January";
						[2] => 	"February";
						...
*/
GetMonthNames:
	local.arr[1] = "January";
	local.arr[2] = "February";
	local.arr[3] = "March";
	local.arr[4] = "April";
	local.arr[5] = "May";
	local.arr[6] = "June";
	local.arr[7] = "July";
	local.arr[8] = "August";
	local.arr[9] = "September";
	local.arr[10] = "October";
	local.arr[11] = "November";
	local.arr[12] = "December";
end local.arr;

/**
 int GetLengthBetween(<string/array> dateTimeStart, 
					  <string/array> dateTimeEnd, 
					  [<bool> includeEndDate], [<bool> asSeconds])
 =================================================================
 OVERVIEW|: Returns the difference between start and end in days 
			or, alternatively, in seconds. If days are returned,
			you can choose to include the end date to round up.
 INPUT	 |: Both arguments must be a date of 'DD.MM.YYYY' notation 
			or a time of 'HH:MM:SS' notation, or a 1-based array of
			the date followed by the time. 
			
 RETURN	 |: <int>	=>	if negative, then end was earlier than start;
			or NIL upon failure;
 NOTE 	 |: Difference cannot be calculated between a time and a date 
			or dateTime.
*/
GetLengthBetween local.dateTimeStart local.dateTimeEnd local.includeEndDate local.asSeconds:
	local.dateTime1 = waitthread __ParseDateTime local.dateTimeStart;
	local.dateTime2 = waitthread __ParseDateTime local.dateTimeEnd;
	
	if (level.DEBUG) {
		if (!local.dateTime1 || !local.dateTime2) {
			conprintf("~^~^~^~ ERROR[System.Time.GetLengthBetween()]: At least two valid times, dates or tuples of dateTime must be specified! ~^~^~^~");
			end;
		}
		// If one dateTime contains a date and the other does not then fail
		if ((local.dateTime1[4] == 0 && local.dateTime1[5] == 0) ^ (local.dateTime2[4] == 0 && local.dateTime2[5] == 0)) {
			conprintf("~^~^~^~ ERROR[System.Time.GetLengthBetween()]: Cannot calculate the difference between a time and a date or a tuple of dateTime! ~^~^~^~");
			end;
		}
	}
	
	local.startDay = (waitthread __GetDayNumber local.dateTime1[4] local.dateTime1[5] local.dateTime1[6]);
	local.endDay = (waitthread __GetDayNumber local.dateTime2[4] local.dateTime2[5] local.dateTime2[6]);
	local.days = abs(local.endDay - local.startDay);
	
	if !(local.asSeconds) {
		if (local.includeEndDate) {
			local.days++;
		}
		if (local.endDay < local.startDay) {
			local.days = local.days * -1;
		}
		end local.days;
	}
	
	local.seconds = local.days * 24 * 60 * 60;
	local.seconds += abs(local.dateTime2[1] - local.dateTime1[1]);
	local.seconds += abs((local.dateTime2[2] * 60) - (local.dateTime1[2] * 60));
	local.seconds += abs((local.dateTime2[3] * 60 * 60) - (local.dateTime1[3] * 60 * 60));
	
	if (local.endDay < local.startDay) {
		local.seconds = local.seconds * -1;
	} 
	else if (local.days == 0) {
		if (local.dateTime2[3] < local.dateTime1[3] || \
			local.dateTime2[2] < local.dateTime1[2] || \
			local.dateTime2[1] < local.dateTime1[1]) 
		{
			local.seconds = local.seconds * -1;
		}
	}
end local.seconds;

__GetDayNumber local.day local.month local.year:
	if (local.day == 0) { 
		end 0;
	}
	local.m = (local.month + 9) % 12
	local.y = local.year - local.m/10
end (365*local.y + local.y/4 - local.y/100 + local.y/400 + (local.m*306 + 5)/10 + ( local.day - 1 ));

/**
 array[1] ToGMT(<string/array> dateTime, [<int> GMT_offset])
 =================================================================
 OVERVIEW|: Returns the given time adjusted to Greenwich Mean Time.
			If no offset is provided, the function will use the 
			timezone offset used by the server's OS.
 INPUT	 |: Argument must be a date of 'DD.MM.YYYY' notation or 
			a time of 'HH:MM:SS' notation, or a 1-based array of
			the date followed by the time. 
			
 RETURN	 |: <string/array> specified time or dateTime adjusted to 
			GMT offset; or NIL upon failure.
*/
ToGMT local.time local.offset:
	local.dateTime = waitthread __ParseDateTime local.time;
	if (level.DEBUG) {
		if (!local.dateTime) {
			conprintf("~^~^~^~ ERROR[System.Time.ToGMT()]: At least two valid times or tuples of dateTime must be specified! ~^~^~^~");
			end; // error;
		}
	}
	
	if ((typeof local.offset)[0] != "i") {
		local.offset = gettimezone(0);
	}
	
	local.offset = local.dateTime[3] - local.offset;
	local.dateTime[3] = (24 + local.offset) % 24;
	
	if (local.dateTime[4] != 0 && local.dateTime1[5] != 0) {
		if (local.offset < 0) {
			waitthread __AddOrSubtractDays local.dateTime -1;
		} else if (local.offset > 23) {
			waitthread __AddOrSubtractDays local.dateTime 1;
		}
		
		end (waitthread __DateTimeToString local.dateTime);
	}
end (waitthread __DateTimeToString local.dateTime)[2];

/**
 int Compare(<string/array> dateTime1, <string/array> dateTime2)
 =================================================================
 OVERVIEW|: Returns whether the first is older than, equal to or
			more recent than the second.
 INPUT	 |: Both arguments must be a date of 'DD.MM.YYYY' notation 
			or a time of 'HH:MM:SS' notation, or a 1-based array of
			the date followed by the time. 
 RETURN	 |: <int>	=>	1 = the first is more recent than the second;
						0 = the first is equal to the second;
						-1 = the first is earlier than the second;
			or NIL upon failure.
						
 NOTE 	 |: A time cannot be compared to a date or dateTime.
*/
Compare local.dateTime1 local.dateTime2:
	local.dateTime1 = waitthread __ParseDateTime local.dateTime1;
	local.dateTime2 = waitthread __ParseDateTime local.dateTime2;
	if (level.DEBUG) {
		if (!local.dateTime1 || !local.dateTime2) {
			conprintf("~^~^~^~ ERROR[System.Time.Compare()]: At least two valid times, dates or tuples of dateTime must be specified! ~^~^~^~");
			end;
		}
		// If one dateTime contains a date and the other does not then fail
		if ((local.dateTime1[4] == 0 && local.dateTime1[5] == 0) ^ (local.dateTime2[4] == 0 && local.dateTime2[5] == 0)) {
			conprintf("~^~^~^~ ERROR[System.Time.Compare()]: Cannot compare time to a date or a tuple of dateTime! ~^~^~^~");
			end;
		}
	}
	
	// Comparison (from years to seconds)
	for (local.i = local.dateTime1.size; 0 < local.i; local.i--) {
		if (local.dateTime1[local.i] < local.dateTime2[local.i]) {
			end -1;
		} 
		else if (local.dateTime1[local.i] > local.dateTime2[local.i]) {
			end 1;
		}
	}
end 0;

/** ===========================================================================================================
*** 										S	t	u	f	f	...											***
============================================================================================================ */
__AddOrSubtractDays local.dateTime local.adj:
	// Can't use a fancy, magic-number algorithm because 
	// my integers keep overflowing... the nasty way then.
	local.m[1] = 31;
	local.m[2] = 28;
	local.m[3] = 31;
	local.m[4] = 30;
	local.m[5] = 31;
	local.m[6] = 30;
	local.m[7] = 31;
	local.m[8] = 31;
	local.m[9] = 30;
	local.m[10] = 31;
	local.m[11] = 30;
	local.m[12] = 31;
	if (waitthread IsLeapYear local.dateTime[6]) {
		local.m[2]++;
	} 

	local.day = local.dateTime[4] + local.adj;
	local.month = local.dateTime[5];
	local.year = local.dateTime[6];
	
	while (local.m[local.month] < local.day) {
		local.day -= local.m[local.month];
		local.month++;
		if (12 < local.month) {
			local.year++;
			local.month = 1;
		}
	}
	while (local.day <= 0) {
		local.month--;
		if (local.month <= 0) {
			local.year--;
			local.month = 12;
		}
		local.day = local.m[local.month] + local.day;
	}
	
	local.dateTime[4] = local.day;
	local.dateTime[5] = local.month;
	local.dateTime[6] = local.year;
end;

__DateTimeToString local.dateTime:
	for (local.i = local.dateTime.size; 0 < local.i; local.i--) {
		local.dateTime[local.i] = (string(local.dateTime[local.i]));
		if (local.dateTime[local.i].size < 2) {
			local.dateTime[local.i] = "0" + local.dateTime[local.i];
		}
	}
end (local.dateTime[4] + "." + local.dateTime[5] + "." + local.dateTime[6] + " ")::(local.dateTime[3] + ":" + local.dateTime[2] + ":" + local.dateTime[1]);

__ParseDateTime local.dateTime:
	if (waitthread game.System.Array.IsArray local.dateTime) {
		if (local.dateTime.size == 2) {
			local.date = waitthread __ParseDateOrTime local.dateTime[1];
			local.time = waitthread __ParseDateOrTime local.dateTime[2];
		}
		if (!local.date || !local.time) {
			end;
		}
		local.result = local.time[1]::local.time[2]::local.time[3]::local.date[4]::local.date[5]::local.date[6];
	} 
	else {
		local.result = waitthread __ParseDateOrTime local.dateTime;
	}
end local.result; //returns internal format, a constant array: seconds::minutes::hours::days::months::years

__ParseDateOrTime local.dateTime:
	if !(waitthread game.System.String.IsString local.dateTime) {
		end;
	}
	
	if ((local.dateTime.size == 11 || local.dateTime.size == 10) && local.dateTime[2] == "." && local.dateTime[5] == ".") {
		local.day = int("" + local.dateTime[0] + local.dateTime[1]);
		local.month = int("" + local.dateTime[3] + local.dateTime[4]);
		local.year = int("" + local.dateTime[6] + local.dateTime[7] + local.dateTime[8] + local.dateTime[9]);
		
		if (local.day < 1 || 31 < local.day) {
			end;
		}
		if (local.month < 1 && 12 < local.month) {
			end;
		}
		if (local.year < 1582) {
			end;
		}
		local.result = 0::0::0::local.day::local.month::local.year;
	}
	else if (local.dateTime.size == 8 && local.dateTime[2] == ":" && local.dateTime[5] == ":") {
		local.hour = int("" + local.dateTime[0] + local.dateTime[1]);
		local.minutes = int("" + local.dateTime[3] + local.dateTime[4]);
		local.seconds = int("" + local.dateTime[6] + local.dateTime[7]);
		
		if (local.hour < 0 || 23 < local.hour) {
			end;
		}
		if (local.minutes < 0 || 59 < local.minutes) {
			end;
		} 
		if (local.seconds < 0 || 59 < local.seconds) {
			end;
		}
		local.result = local.seconds::local.minutes::local.hour::0::0::0;
	}
end local.result;